Command Line Args: Namespace(config_file='configs/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'detectron2://COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl'], resume=False)
[32m[02/04 23:10:45 detectron2]: [0mRank of current process: 0. World size: 1
[32m[02/04 23:10:45 detectron2]: [0mEnvironment info:
------------------------  ---------------------------------------------------------------
sys.platform              linux
Python                    3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                     1.17.5
detectron2                0.1 @/content/detectron2_repo/detectron2
detectron2 compiler       GCC 7.4
detectron2 CUDA compiler  10.0
detectron2 arch flags     sm_75
DETECTRON2_ENV_MODULE     <not set>
PyTorch                   1.4.0+cu100 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build       False
CUDA available            True
GPU 0                     Tesla T4
CUDA_HOME                 /usr/local/cuda
NVCC                      Cuda compilation tools, release 10.0, V10.0.130
Pillow                    6.2.2
torchvision               0.5.0+cu100 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags    sm_35, sm_50, sm_60, sm_70, sm_75
cv2                       4.1.2
------------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[32m[02/04 23:10:45 detectron2]: [0mCommand line arguments: Namespace(config_file='configs/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'detectron2://COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl'], resume=False)
[32m[02/04 23:10:45 detectron2]: [0mContents of args.config_file=configs/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x.yaml:
_BASE_: "Base-Panoptic-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-101.pkl"
  RESNETS:
    DEPTH: 101
SOLVER:
  STEPS: (210000, 250000)
  MAX_ITER: 270000

[32m[02/04 23:10:45 detectron2]: [0mRunning with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('coco_2017_val_panoptic_separated',)
  TRAIN: ('coco_2017_train_panoptic_separated',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: PanopticFPN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 101
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 0.5
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 270000
  MOMENTUM: 0.9
  STEPS: (210000, 250000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[32m[02/04 23:10:45 detectron2]: [0mFull config saved to /content/detectron2_repo/output/config.yaml
[32m[02/04 23:10:45 d2.utils.env]: [0mUsing a generated random seed 45322736
[32m[02/04 23:10:49 d2.engine.defaults]: [0mModel:
PanopticFPN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (sem_seg_head): SemSegFPNHead(
    (p2): Sequential(
      (0): Conv2d(
        256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
    )
    (p3): Sequential(
      (0): Conv2d(
        256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (1): Upsample(scale_factor=2.0, mode=bilinear)
    )
    (p4): Sequential(
      (0): Conv2d(
        256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (1): Upsample(scale_factor=2.0, mode=bilinear)
      (2): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (3): Upsample(scale_factor=2.0, mode=bilinear)
    )
    (p5): Sequential(
      (0): Conv2d(
        256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (1): Upsample(scale_factor=2.0, mode=bilinear)
      (2): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (3): Upsample(scale_factor=2.0, mode=bilinear)
      (4): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 128, eps=1e-05, affine=True)
      )
      (5): Upsample(scale_factor=2.0, mode=bilinear)
    )
    (predictor): Conv2d(128, 54, kernel_size=(1, 1), stride=(1, 1))
  )
)
[32m[02/04 23:10:49 fvcore.common.checkpoint]: [0mLoading checkpoint from detectron2://COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl
[32m[02/04 23:10:49 fvcore.common.file_io]: [0mDownloading https://dl.fbaipublicfiles.com/detectron2/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl ...
[32m[02/04 23:10:49 fvcore.common.download]: [0mDownloading from https://dl.fbaipublicfiles.com/detectron2/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl ...
[32m[02/04 23:11:17 fvcore.common.download]: [0mSuccessfully downloaded /root/.torch/fvcore_cache/detectron2/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl. 260581693 bytes.
[32m[02/04 23:11:17 fvcore.common.file_io]: [0mURL https://dl.fbaipublicfiles.com/detectron2/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl cached in /root/.torch/fvcore_cache/detectron2/COCO-PanopticSegmentation/panoptic_fpn_R_101_3x/139514519/model_final_cafdb1.pkl
[32m[02/04 23:11:17 fvcore.common.checkpoint]: [0mReading a file from 'Detectron2 Model Zoo'
[32m[02/04 23:11:18 d2.data.datasets.coco]: [0mLoaded 5000 images in COCO format from datasets/coco/annotations/instances_val2017.json
[32m[02/04 23:11:18 d2.data.datasets.coco]: [0mLoaded 5000 images with semantic segmentation from datasets/coco/val2017
[32m[02/04 23:11:19 d2.data.build]: [0mDistribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 10777        |   bicycle    | 314          |      car      | 1918         |
|  motorcycle   | 367          |   airplane   | 143          |      bus      | 283          |
|     train     | 190          |    truck     | 414          |     boat      | 424          |
| traffic light | 634          | fire hydrant | 101          |   stop sign   | 75           |
| parking meter | 60           |    bench     | 411          |     bird      | 427          |
|      cat      | 202          |     dog      | 218          |     horse     | 272          |
|     sheep     | 354          |     cow      | 372          |   elephant    | 252          |
|     bear      | 71           |    zebra     | 266          |    giraffe    | 232          |
|   backpack    | 371          |   umbrella   | 407          |    handbag    | 540          |
|      tie      | 252          |   suitcase   | 299          |    frisbee    | 115          |
|     skis      | 241          |  snowboard   | 69           |  sports ball  | 260          |
|     kite      | 327          | baseball bat | 145          | baseball gl.. | 148          |
|  skateboard   | 179          |  surfboard   | 267          | tennis racket | 225          |
|    bottle     | 1013         |  wine glass  | 341          |      cup      | 895          |
|     fork      | 215          |    knife     | 325          |     spoon     | 253          |
|     bowl      | 623          |    banana    | 370          |     apple     | 236          |
|   sandwich    | 177          |    orange    | 285          |   broccoli    | 312          |
|    carrot     | 365          |   hot dog    | 125          |     pizza     | 284          |
|     donut     | 328          |     cake     | 310          |     chair     | 1771         |
|     couch     | 261          | potted plant | 342          |      bed      | 163          |
| dining table  | 695          |    toilet    | 179          |      tv       | 288          |
|    laptop     | 231          |    mouse     | 106          |    remote     | 283          |
|   keyboard    | 153          |  cell phone  | 262          |   microwave   | 55           |
|     oven      | 143          |   toaster    | 9            |     sink      | 225          |
| refrigerator  | 126          |     book     | 1129         |     clock     | 267          |
|     vase      | 274          |   scissors   | 36           |  teddy bear   | 190          |
|  hair drier   | 11           |  toothbrush  | 57           |               |              |
|     total     | 36335        |              |              |               |              |[0m
[32m[02/04 23:11:19 d2.data.datasets.coco]: [0mLoaded 5000 images in COCO format from datasets/coco/annotations/instances_val2017.json
[32m[02/04 23:11:20 d2.data.datasets.coco]: [0mLoaded 5000 images with semantic segmentation from datasets/coco/val2017
[32m[02/04 23:11:20 d2.evaluation.evaluator]: [0mStart inference on 5000 images
[32m[02/04 23:11:24 d2.evaluation.evaluator]: [0mInference done 11/5000. 0.1774 s / img. ETA=0:20:30
[32m[02/04 23:11:29 d2.evaluation.evaluator]: [0mInference done 33/5000. 0.1787 s / img. ETA=0:19:40
[32m[02/04 23:11:34 d2.evaluation.evaluator]: [0mInference done 54/5000. 0.1796 s / img. ETA=0:19:57
[32m[02/04 23:11:39 d2.evaluation.evaluator]: [0mInference done 76/5000. 0.1804 s / img. ETA=0:19:48
[32m[02/04 23:11:44 d2.evaluation.evaluator]: [0mInference done 97/5000. 0.1797 s / img. ETA=0:19:51
[32m[02/04 23:11:50 d2.evaluation.evaluator]: [0mInference done 119/5000. 0.1792 s / img. ETA=0:19:44
[32m[02/04 23:11:55 d2.evaluation.evaluator]: [0mInference done 138/5000. 0.1806 s / img. ETA=0:19:55
[32m[02/04 23:12:00 d2.evaluation.evaluator]: [0mInference done 159/5000. 0.1812 s / img. ETA=0:19:52
[32m[02/04 23:12:05 d2.evaluation.evaluator]: [0mInference done 179/5000. 0.1812 s / img. ETA=0:19:49
[32m[02/04 23:12:10 d2.evaluation.evaluator]: [0mInference done 200/5000. 0.1813 s / img. ETA=0:19:41
[32m[02/04 23:12:15 d2.evaluation.evaluator]: [0mInference done 222/5000. 0.1811 s / img. ETA=0:19:30
[32m[02/04 23:12:20 d2.evaluation.evaluator]: [0mInference done 243/5000. 0.1815 s / img. ETA=0:19:26
[32m[02/04 23:12:25 d2.evaluation.evaluator]: [0mInference done 262/5000. 0.1823 s / img. ETA=0:19:28
[32m[02/04 23:12:31 d2.evaluation.evaluator]: [0mInference done 284/5000. 0.1820 s / img. ETA=0:19:19
[32m[02/04 23:12:36 d2.evaluation.evaluator]: [0mInference done 304/5000. 0.1826 s / img. ETA=0:19:17
[32m[02/04 23:12:41 d2.evaluation.evaluator]: [0mInference done 323/5000. 0.1828 s / img. ETA=0:19:18
[32m[02/04 23:12:46 d2.evaluation.evaluator]: [0mInference done 342/5000. 0.1834 s / img. ETA=0:19:18
[32m[02/04 23:12:51 d2.evaluation.evaluator]: [0mInference done 362/5000. 0.1837 s / img. ETA=0:19:13
[32m[02/04 23:12:56 d2.evaluation.evaluator]: [0mInference done 384/5000. 0.1834 s / img. ETA=0:19:04
[32m[02/04 23:13:01 d2.evaluation.evaluator]: [0mInference done 405/5000. 0.1833 s / img. ETA=0:18:58
[32m[02/04 23:13:06 d2.evaluation.evaluator]: [0mInference done 427/5000. 0.1830 s / img. ETA=0:18:49
[32m[02/04 23:13:11 d2.evaluation.evaluator]: [0mInference done 448/5000. 0.1831 s / img. ETA=0:18:43
[32m[02/04 23:13:17 d2.evaluation.evaluator]: [0mInference done 470/5000. 0.1830 s / img. ETA=0:18:35
[32m[02/04 23:13:22 d2.evaluation.evaluator]: [0mInference done 490/5000. 0.1833 s / img. ETA=0:18:32
[32m[02/04 23:13:27 d2.evaluation.evaluator]: [0mInference done 510/5000. 0.1834 s / img. ETA=0:18:29
[32m[02/04 23:13:32 d2.evaluation.evaluator]: [0mInference done 531/5000. 0.1834 s / img. ETA=0:18:25
[32m[02/04 23:13:37 d2.evaluation.evaluator]: [0mInference done 551/5000. 0.1834 s / img. ETA=0:18:20
[32m[02/04 23:13:42 d2.evaluation.evaluator]: [0mInference done 572/5000. 0.1835 s / img. ETA=0:18:16
[32m[02/04 23:13:48 d2.evaluation.evaluator]: [0mInference done 592/5000. 0.1835 s / img. ETA=0:18:12
[32m[02/04 23:13:53 d2.evaluation.evaluator]: [0mInference done 613/5000. 0.1835 s / img. ETA=0:18:07
[32m[02/04 23:13:58 d2.evaluation.evaluator]: [0mInference done 633/5000. 0.1837 s / img. ETA=0:18:03
[32m[02/04 23:14:03 d2.evaluation.evaluator]: [0mInference done 652/5000. 0.1838 s / img. ETA=0:18:00
[32m[02/04 23:14:08 d2.evaluation.evaluator]: [0mInference done 672/5000. 0.1839 s / img. ETA=0:17:57
[32m[02/04 23:14:13 d2.evaluation.evaluator]: [0mInference done 693/5000. 0.1840 s / img. ETA=0:17:51
[32m[02/04 23:14:18 d2.evaluation.evaluator]: [0mInference done 713/5000. 0.1841 s / img. ETA=0:17:47
[32m[02/04 23:14:23 d2.evaluation.evaluator]: [0mInference done 733/5000. 0.1842 s / img. ETA=0:17:43
[32m[02/04 23:14:28 d2.evaluation.evaluator]: [0mInference done 753/5000. 0.1843 s / img. ETA=0:17:38
[32m[02/04 23:14:34 d2.evaluation.evaluator]: [0mInference done 774/5000. 0.1843 s / img. ETA=0:17:32
[32m[02/04 23:14:39 d2.evaluation.evaluator]: [0mInference done 794/5000. 0.1843 s / img. ETA=0:17:27
[32m[02/04 23:14:44 d2.evaluation.evaluator]: [0mInference done 815/5000. 0.1844 s / img. ETA=0:17:22
[32m[02/04 23:14:49 d2.evaluation.evaluator]: [0mInference done 837/5000. 0.1843 s / img. ETA=0:17:15
[32m[02/04 23:14:54 d2.evaluation.evaluator]: [0mInference done 858/5000. 0.1843 s / img. ETA=0:17:10
[32m[02/04 23:14:59 d2.evaluation.evaluator]: [0mInference done 879/5000. 0.1844 s / img. ETA=0:17:05
[32m[02/04 23:15:05 d2.evaluation.evaluator]: [0mInference done 900/5000. 0.1844 s / img. ETA=0:16:59
[32m[02/04 23:15:10 d2.evaluation.evaluator]: [0mInference done 922/5000. 0.1842 s / img. ETA=0:16:52
[32m[02/04 23:15:15 d2.evaluation.evaluator]: [0mInference done 943/5000. 0.1842 s / img. ETA=0:16:47
[32m[02/04 23:15:20 d2.evaluation.evaluator]: [0mInference done 964/5000. 0.1842 s / img. ETA=0:16:41
[32m[02/04 23:15:25 d2.evaluation.evaluator]: [0mInference done 984/5000. 0.1843 s / img. ETA=0:16:37
[32m[02/04 23:15:30 d2.evaluation.evaluator]: [0mInference done 1005/5000. 0.1842 s / img. ETA=0:16:31
[32m[02/04 23:15:36 d2.evaluation.evaluator]: [0mInference done 1026/5000. 0.1842 s / img. ETA=0:16:26
[32m[02/04 23:15:41 d2.evaluation.evaluator]: [0mInference done 1046/5000. 0.1842 s / img. ETA=0:16:22
[32m[02/04 23:15:46 d2.evaluation.evaluator]: [0mInference done 1067/5000. 0.1843 s / img. ETA=0:16:16
[32m[02/04 23:15:51 d2.evaluation.evaluator]: [0mInference done 1087/5000. 0.1844 s / img. ETA=0:16:12
[32m[02/04 23:15:56 d2.evaluation.evaluator]: [0mInference done 1108/5000. 0.1843 s / img. ETA=0:16:06
[32m[02/04 23:16:01 d2.evaluation.evaluator]: [0mInference done 1129/5000. 0.1843 s / img. ETA=0:16:00
[32m[02/04 23:16:06 d2.evaluation.evaluator]: [0mInference done 1149/5000. 0.1843 s / img. ETA=0:15:56
[32m[02/04 23:16:11 d2.evaluation.evaluator]: [0mInference done 1169/5000. 0.1845 s / img. ETA=0:15:51
[32m[02/04 23:16:16 d2.evaluation.evaluator]: [0mInference done 1189/5000. 0.1846 s / img. ETA=0:15:47
[32m[02/04 23:16:21 d2.evaluation.evaluator]: [0mInference done 1208/5000. 0.1847 s / img. ETA=0:15:43
[32m[02/04 23:16:27 d2.evaluation.evaluator]: [0mInference done 1228/5000. 0.1848 s / img. ETA=0:15:39
[32m[02/04 23:16:32 d2.evaluation.evaluator]: [0mInference done 1247/5000. 0.1849 s / img. ETA=0:15:35
[32m[02/04 23:16:37 d2.evaluation.evaluator]: [0mInference done 1268/5000. 0.1848 s / img. ETA=0:15:30
[32m[02/04 23:16:42 d2.evaluation.evaluator]: [0mInference done 1288/5000. 0.1849 s / img. ETA=0:15:25
[32m[02/04 23:16:47 d2.evaluation.evaluator]: [0mInference done 1309/5000. 0.1848 s / img. ETA=0:15:19
[32m[02/04 23:16:52 d2.evaluation.evaluator]: [0mInference done 1330/5000. 0.1847 s / img. ETA=0:15:14
[32m[02/04 23:16:57 d2.evaluation.evaluator]: [0mInference done 1350/5000. 0.1848 s / img. ETA=0:15:09
[32m[02/04 23:17:02 d2.evaluation.evaluator]: [0mInference done 1370/5000. 0.1848 s / img. ETA=0:15:04
[32m[02/04 23:17:07 d2.evaluation.evaluator]: [0mInference done 1392/5000. 0.1847 s / img. ETA=0:14:58
[32m[02/04 23:17:13 d2.evaluation.evaluator]: [0mInference done 1413/5000. 0.1847 s / img. ETA=0:14:52
[32m[02/04 23:17:18 d2.evaluation.evaluator]: [0mInference done 1433/5000. 0.1847 s / img. ETA=0:14:48
[32m[02/04 23:17:23 d2.evaluation.evaluator]: [0mInference done 1454/5000. 0.1847 s / img. ETA=0:14:42
[32m[02/04 23:17:28 d2.evaluation.evaluator]: [0mInference done 1475/5000. 0.1845 s / img. ETA=0:14:37
[32m[02/04 23:17:33 d2.evaluation.evaluator]: [0mInference done 1496/5000. 0.1846 s / img. ETA=0:14:32
[32m[02/04 23:17:38 d2.evaluation.evaluator]: [0mInference done 1517/5000. 0.1844 s / img. ETA=0:14:26
[32m[02/04 23:17:44 d2.evaluation.evaluator]: [0mInference done 1538/5000. 0.1845 s / img. ETA=0:14:21
[32m[02/04 23:17:49 d2.evaluation.evaluator]: [0mInference done 1557/5000. 0.1846 s / img. ETA=0:14:17
[32m[02/04 23:17:54 d2.evaluation.evaluator]: [0mInference done 1577/5000. 0.1846 s / img. ETA=0:14:12
[32m[02/04 23:17:59 d2.evaluation.evaluator]: [0mInference done 1596/5000. 0.1847 s / img. ETA=0:14:08
[32m[02/04 23:18:04 d2.evaluation.evaluator]: [0mInference done 1617/5000. 0.1847 s / img. ETA=0:14:03
[32m[02/04 23:18:09 d2.evaluation.evaluator]: [0mInference done 1638/5000. 0.1847 s / img. ETA=0:13:58
[32m[02/04 23:18:14 d2.evaluation.evaluator]: [0mInference done 1659/5000. 0.1847 s / img. ETA=0:13:52
[32m[02/04 23:18:19 d2.evaluation.evaluator]: [0mInference done 1678/5000. 0.1847 s / img. ETA=0:13:48
[32m[02/04 23:18:25 d2.evaluation.evaluator]: [0mInference done 1699/5000. 0.1847 s / img. ETA=0:13:43
[32m[02/04 23:18:30 d2.evaluation.evaluator]: [0mInference done 1719/5000. 0.1847 s / img. ETA=0:13:38
[32m[02/04 23:18:35 d2.evaluation.evaluator]: [0mInference done 1741/5000. 0.1847 s / img. ETA=0:13:32
[32m[02/04 23:18:40 d2.evaluation.evaluator]: [0mInference done 1762/5000. 0.1847 s / img. ETA=0:13:26
[32m[02/04 23:18:45 d2.evaluation.evaluator]: [0mInference done 1783/5000. 0.1846 s / img. ETA=0:13:21
[32m[02/04 23:18:50 d2.evaluation.evaluator]: [0mInference done 1805/5000. 0.1846 s / img. ETA=0:13:15
[32m[02/04 23:18:55 d2.evaluation.evaluator]: [0mInference done 1825/5000. 0.1846 s / img. ETA=0:13:10
[32m[02/04 23:19:01 d2.evaluation.evaluator]: [0mInference done 1846/5000. 0.1846 s / img. ETA=0:13:05
[32m[02/04 23:19:06 d2.evaluation.evaluator]: [0mInference done 1866/5000. 0.1846 s / img. ETA=0:13:00
[32m[02/04 23:19:11 d2.evaluation.evaluator]: [0mInference done 1887/5000. 0.1846 s / img. ETA=0:12:55
[32m[02/04 23:19:16 d2.evaluation.evaluator]: [0mInference done 1907/5000. 0.1846 s / img. ETA=0:12:50
[32m[02/04 23:19:21 d2.evaluation.evaluator]: [0mInference done 1929/5000. 0.1846 s / img. ETA=0:12:44
[32m[02/04 23:19:26 d2.evaluation.evaluator]: [0mInference done 1951/5000. 0.1845 s / img. ETA=0:12:38
[32m[02/04 23:19:31 d2.evaluation.evaluator]: [0mInference done 1971/5000. 0.1846 s / img. ETA=0:12:34
[32m[02/04 23:19:37 d2.evaluation.evaluator]: [0mInference done 1990/5000. 0.1846 s / img. ETA=0:12:29
[32m[02/04 23:19:42 d2.evaluation.evaluator]: [0mInference done 2010/5000. 0.1846 s / img. ETA=0:12:24
[32m[02/04 23:19:47 d2.evaluation.evaluator]: [0mInference done 2031/5000. 0.1846 s / img. ETA=0:12:19
[32m[02/04 23:19:52 d2.evaluation.evaluator]: [0mInference done 2051/5000. 0.1846 s / img. ETA=0:12:14
[32m[02/04 23:19:57 d2.evaluation.evaluator]: [0mInference done 2073/5000. 0.1846 s / img. ETA=0:12:08
[32m[02/04 23:20:02 d2.evaluation.evaluator]: [0mInference done 2094/5000. 0.1846 s / img. ETA=0:12:03
[32m[02/04 23:20:07 d2.evaluation.evaluator]: [0mInference done 2114/5000. 0.1846 s / img. ETA=0:11:58
[32m[02/04 23:20:13 d2.evaluation.evaluator]: [0mInference done 2136/5000. 0.1845 s / img. ETA=0:11:53
[32m[02/04 23:20:18 d2.evaluation.evaluator]: [0mInference done 2156/5000. 0.1845 s / img. ETA=0:11:48
[32m[02/04 23:20:23 d2.evaluation.evaluator]: [0mInference done 2176/5000. 0.1845 s / img. ETA=0:11:43
[32m[02/04 23:20:28 d2.evaluation.evaluator]: [0mInference done 2198/5000. 0.1845 s / img. ETA=0:11:37
[32m[02/04 23:20:33 d2.evaluation.evaluator]: [0mInference done 2218/5000. 0.1845 s / img. ETA=0:11:32
[32m[02/04 23:20:38 d2.evaluation.evaluator]: [0mInference done 2239/5000. 0.1845 s / img. ETA=0:11:27
[32m[02/04 23:20:43 d2.evaluation.evaluator]: [0mInference done 2259/5000. 0.1846 s / img. ETA=0:11:22
[32m[02/04 23:20:48 d2.evaluation.evaluator]: [0mInference done 2279/5000. 0.1846 s / img. ETA=0:11:17
[32m[02/04 23:20:54 d2.evaluation.evaluator]: [0mInference done 2301/5000. 0.1846 s / img. ETA=0:11:11
[32m[02/04 23:20:59 d2.evaluation.evaluator]: [0mInference done 2321/5000. 0.1846 s / img. ETA=0:11:06
[32m[02/04 23:21:04 d2.evaluation.evaluator]: [0mInference done 2344/5000. 0.1845 s / img. ETA=0:11:00
[32m[02/04 23:21:09 d2.evaluation.evaluator]: [0mInference done 2365/5000. 0.1845 s / img. ETA=0:10:55
[32m[02/04 23:21:14 d2.evaluation.evaluator]: [0mInference done 2386/5000. 0.1846 s / img. ETA=0:10:50
[32m[02/04 23:21:20 d2.evaluation.evaluator]: [0mInference done 2406/5000. 0.1846 s / img. ETA=0:10:45
[32m[02/04 23:21:25 d2.evaluation.evaluator]: [0mInference done 2426/5000. 0.1846 s / img. ETA=0:10:40
[32m[02/04 23:21:30 d2.evaluation.evaluator]: [0mInference done 2446/5000. 0.1847 s / img. ETA=0:10:36
[32m[02/04 23:21:35 d2.evaluation.evaluator]: [0mInference done 2467/5000. 0.1847 s / img. ETA=0:10:30
[32m[02/04 23:21:40 d2.evaluation.evaluator]: [0mInference done 2488/5000. 0.1846 s / img. ETA=0:10:25
[32m[02/04 23:21:46 d2.evaluation.evaluator]: [0mInference done 2509/5000. 0.1846 s / img. ETA=0:10:20
[32m[02/04 23:21:51 d2.evaluation.evaluator]: [0mInference done 2529/5000. 0.1846 s / img. ETA=0:10:15
[32m[02/04 23:21:56 d2.evaluation.evaluator]: [0mInference done 2550/5000. 0.1846 s / img. ETA=0:10:10
[32m[02/04 23:22:01 d2.evaluation.evaluator]: [0mInference done 2570/5000. 0.1846 s / img. ETA=0:10:05
[32m[02/04 23:22:06 d2.evaluation.evaluator]: [0mInference done 2591/5000. 0.1846 s / img. ETA=0:10:00
[32m[02/04 23:22:12 d2.evaluation.evaluator]: [0mInference done 2612/5000. 0.1846 s / img. ETA=0:09:54
[32m[02/04 23:22:17 d2.evaluation.evaluator]: [0mInference done 2632/5000. 0.1847 s / img. ETA=0:09:50
[32m[02/04 23:22:22 d2.evaluation.evaluator]: [0mInference done 2652/5000. 0.1847 s / img. ETA=0:09:45
[32m[02/04 23:22:27 d2.evaluation.evaluator]: [0mInference done 2673/5000. 0.1847 s / img. ETA=0:09:39
[32m[02/04 23:22:32 d2.evaluation.evaluator]: [0mInference done 2694/5000. 0.1847 s / img. ETA=0:09:34
[32m[02/04 23:22:37 d2.evaluation.evaluator]: [0mInference done 2716/5000. 0.1847 s / img. ETA=0:09:28
[32m[02/04 23:22:42 d2.evaluation.evaluator]: [0mInference done 2736/5000. 0.1847 s / img. ETA=0:09:23
[32m[02/04 23:22:47 d2.evaluation.evaluator]: [0mInference done 2757/5000. 0.1846 s / img. ETA=0:09:18
[32m[02/04 23:22:52 d2.evaluation.evaluator]: [0mInference done 2778/5000. 0.1846 s / img. ETA=0:09:13
[32m[02/04 23:22:57 d2.evaluation.evaluator]: [0mInference done 2798/5000. 0.1846 s / img. ETA=0:09:08
[32m[02/04 23:23:02 d2.evaluation.evaluator]: [0mInference done 2818/5000. 0.1846 s / img. ETA=0:09:03
[32m[02/04 23:23:08 d2.evaluation.evaluator]: [0mInference done 2838/5000. 0.1846 s / img. ETA=0:08:58
[32m[02/04 23:23:13 d2.evaluation.evaluator]: [0mInference done 2859/5000. 0.1847 s / img. ETA=0:08:53
[32m[02/04 23:23:18 d2.evaluation.evaluator]: [0mInference done 2880/5000. 0.1847 s / img. ETA=0:08:47
[32m[02/04 23:23:23 d2.evaluation.evaluator]: [0mInference done 2900/5000. 0.1847 s / img. ETA=0:08:43
[32m[02/04 23:23:28 d2.evaluation.evaluator]: [0mInference done 2920/5000. 0.1847 s / img. ETA=0:08:38
[32m[02/04 23:23:33 d2.evaluation.evaluator]: [0mInference done 2940/5000. 0.1847 s / img. ETA=0:08:33
[32m[02/04 23:23:38 d2.evaluation.evaluator]: [0mInference done 2961/5000. 0.1847 s / img. ETA=0:08:27
[32m[02/04 23:23:44 d2.evaluation.evaluator]: [0mInference done 2982/5000. 0.1847 s / img. ETA=0:08:22
[32m[02/04 23:23:49 d2.evaluation.evaluator]: [0mInference done 3003/5000. 0.1847 s / img. ETA=0:08:17
[32m[02/04 23:23:54 d2.evaluation.evaluator]: [0mInference done 3024/5000. 0.1847 s / img. ETA=0:08:12
[32m[02/04 23:23:59 d2.evaluation.evaluator]: [0mInference done 3044/5000. 0.1847 s / img. ETA=0:08:07
[32m[02/04 23:24:04 d2.evaluation.evaluator]: [0mInference done 3065/5000. 0.1847 s / img. ETA=0:08:01
[32m[02/04 23:24:09 d2.evaluation.evaluator]: [0mInference done 3086/5000. 0.1848 s / img. ETA=0:07:56
[32m[02/04 23:24:14 d2.evaluation.evaluator]: [0mInference done 3107/5000. 0.1847 s / img. ETA=0:07:51
[32m[02/04 23:24:19 d2.evaluation.evaluator]: [0mInference done 3127/5000. 0.1848 s / img. ETA=0:07:46
[32m[02/04 23:24:24 d2.evaluation.evaluator]: [0mInference done 3146/5000. 0.1848 s / img. ETA=0:07:41
[32m[02/04 23:24:29 d2.evaluation.evaluator]: [0mInference done 3167/5000. 0.1848 s / img. ETA=0:07:36
[32m[02/04 23:24:35 d2.evaluation.evaluator]: [0mInference done 3187/5000. 0.1848 s / img. ETA=0:07:31
[32m[02/04 23:24:40 d2.evaluation.evaluator]: [0mInference done 3207/5000. 0.1848 s / img. ETA=0:07:26
[32m[02/04 23:24:45 d2.evaluation.evaluator]: [0mInference done 3226/5000. 0.1848 s / img. ETA=0:07:22
[32m[02/04 23:24:50 d2.evaluation.evaluator]: [0mInference done 3247/5000. 0.1848 s / img. ETA=0:07:16
[32m[02/04 23:24:55 d2.evaluation.evaluator]: [0mInference done 3267/5000. 0.1848 s / img. ETA=0:07:11
[32m[02/04 23:25:00 d2.evaluation.evaluator]: [0mInference done 3287/5000. 0.1849 s / img. ETA=0:07:06
[32m[02/04 23:25:05 d2.evaluation.evaluator]: [0mInference done 3306/5000. 0.1849 s / img. ETA=0:07:02
[32m[02/04 23:25:10 d2.evaluation.evaluator]: [0mInference done 3327/5000. 0.1849 s / img. ETA=0:06:57
[32m[02/04 23:25:16 d2.evaluation.evaluator]: [0mInference done 3348/5000. 0.1849 s / img. ETA=0:06:51
[32m[02/04 23:25:21 d2.evaluation.evaluator]: [0mInference done 3367/5000. 0.1849 s / img. ETA=0:06:47
[32m[02/04 23:25:26 d2.evaluation.evaluator]: [0mInference done 3388/5000. 0.1849 s / img. ETA=0:06:42
[32m[02/04 23:25:31 d2.evaluation.evaluator]: [0mInference done 3409/5000. 0.1849 s / img. ETA=0:06:36
[32m[02/04 23:25:36 d2.evaluation.evaluator]: [0mInference done 3430/5000. 0.1849 s / img. ETA=0:06:31
[32m[02/04 23:25:41 d2.evaluation.evaluator]: [0mInference done 3449/5000. 0.1849 s / img. ETA=0:06:27
[32m[02/04 23:25:46 d2.evaluation.evaluator]: [0mInference done 3470/5000. 0.1849 s / img. ETA=0:06:21
[32m[02/04 23:25:51 d2.evaluation.evaluator]: [0mInference done 3492/5000. 0.1849 s / img. ETA=0:06:15
[32m[02/04 23:25:57 d2.evaluation.evaluator]: [0mInference done 3512/5000. 0.1849 s / img. ETA=0:06:11
[32m[02/04 23:26:02 d2.evaluation.evaluator]: [0mInference done 3533/5000. 0.1849 s / img. ETA=0:06:05
[32m[02/04 23:26:07 d2.evaluation.evaluator]: [0mInference done 3554/5000. 0.1848 s / img. ETA=0:06:00
[32m[02/04 23:26:12 d2.evaluation.evaluator]: [0mInference done 3575/5000. 0.1849 s / img. ETA=0:05:55
[32m[02/04 23:26:17 d2.evaluation.evaluator]: [0mInference done 3594/5000. 0.1849 s / img. ETA=0:05:50
[32m[02/04 23:26:22 d2.evaluation.evaluator]: [0mInference done 3615/5000. 0.1849 s / img. ETA=0:05:45
[32m[02/04 23:26:27 d2.evaluation.evaluator]: [0mInference done 3634/5000. 0.1849 s / img. ETA=0:05:40
[32m[02/04 23:26:32 d2.evaluation.evaluator]: [0mInference done 3655/5000. 0.1849 s / img. ETA=0:05:35
[32m[02/04 23:26:38 d2.evaluation.evaluator]: [0mInference done 3676/5000. 0.1849 s / img. ETA=0:05:30
[32m[02/04 23:26:43 d2.evaluation.evaluator]: [0mInference done 3697/5000. 0.1849 s / img. ETA=0:05:24
[32m[02/04 23:26:48 d2.evaluation.evaluator]: [0mInference done 3718/5000. 0.1849 s / img. ETA=0:05:19
[32m[02/04 23:26:53 d2.evaluation.evaluator]: [0mInference done 3739/5000. 0.1849 s / img. ETA=0:05:14
[32m[02/04 23:26:58 d2.evaluation.evaluator]: [0mInference done 3759/5000. 0.1849 s / img. ETA=0:05:09
[32m[02/04 23:27:03 d2.evaluation.evaluator]: [0mInference done 3779/5000. 0.1849 s / img. ETA=0:05:04
[32m[02/04 23:27:08 d2.evaluation.evaluator]: [0mInference done 3799/5000. 0.1849 s / img. ETA=0:04:59
[32m[02/04 23:27:13 d2.evaluation.evaluator]: [0mInference done 3819/5000. 0.1849 s / img. ETA=0:04:54
[32m[02/04 23:27:19 d2.evaluation.evaluator]: [0mInference done 3840/5000. 0.1849 s / img. ETA=0:04:49
[32m[02/04 23:27:24 d2.evaluation.evaluator]: [0mInference done 3861/5000. 0.1849 s / img. ETA=0:04:44
[32m[02/04 23:27:29 d2.evaluation.evaluator]: [0mInference done 3882/5000. 0.1849 s / img. ETA=0:04:38
[32m[02/04 23:27:34 d2.evaluation.evaluator]: [0mInference done 3904/5000. 0.1849 s / img. ETA=0:04:33
[32m[02/04 23:27:39 d2.evaluation.evaluator]: [0mInference done 3925/5000. 0.1849 s / img. ETA=0:04:27
[32m[02/04 23:27:44 d2.evaluation.evaluator]: [0mInference done 3945/5000. 0.1849 s / img. ETA=0:04:23
[32m[02/04 23:27:49 d2.evaluation.evaluator]: [0mInference done 3965/5000. 0.1849 s / img. ETA=0:04:18
[32m[02/04 23:27:55 d2.evaluation.evaluator]: [0mInference done 3987/5000. 0.1849 s / img. ETA=0:04:12
[32m[02/04 23:28:00 d2.evaluation.evaluator]: [0mInference done 4007/5000. 0.1849 s / img. ETA=0:04:07
[32m[02/04 23:28:05 d2.evaluation.evaluator]: [0mInference done 4027/5000. 0.1849 s / img. ETA=0:04:02
[32m[02/04 23:28:10 d2.evaluation.evaluator]: [0mInference done 4047/5000. 0.1849 s / img. ETA=0:03:57
[32m[02/04 23:28:15 d2.evaluation.evaluator]: [0mInference done 4068/5000. 0.1849 s / img. ETA=0:03:52
[32m[02/04 23:28:20 d2.evaluation.evaluator]: [0mInference done 4087/5000. 0.1849 s / img. ETA=0:03:47
[32m[02/04 23:28:26 d2.evaluation.evaluator]: [0mInference done 4108/5000. 0.1849 s / img. ETA=0:03:42
[32m[02/04 23:28:31 d2.evaluation.evaluator]: [0mInference done 4129/5000. 0.1849 s / img. ETA=0:03:37
[32m[02/04 23:28:36 d2.evaluation.evaluator]: [0mInference done 4149/5000. 0.1849 s / img. ETA=0:03:32
[32m[02/04 23:28:41 d2.evaluation.evaluator]: [0mInference done 4168/5000. 0.1849 s / img. ETA=0:03:27
[32m[02/04 23:28:46 d2.evaluation.evaluator]: [0mInference done 4188/5000. 0.1849 s / img. ETA=0:03:22
[32m[02/04 23:28:51 d2.evaluation.evaluator]: [0mInference done 4209/5000. 0.1849 s / img. ETA=0:03:17
[32m[02/04 23:28:56 d2.evaluation.evaluator]: [0mInference done 4230/5000. 0.1849 s / img. ETA=0:03:12
[32m[02/04 23:29:02 d2.evaluation.evaluator]: [0mInference done 4250/5000. 0.1849 s / img. ETA=0:03:07
[32m[02/04 23:29:07 d2.evaluation.evaluator]: [0mInference done 4270/5000. 0.1849 s / img. ETA=0:03:02
[32m[02/04 23:29:12 d2.evaluation.evaluator]: [0mInference done 4290/5000. 0.1849 s / img. ETA=0:02:57
[32m[02/04 23:29:17 d2.evaluation.evaluator]: [0mInference done 4311/5000. 0.1849 s / img. ETA=0:02:51
[32m[02/04 23:29:22 d2.evaluation.evaluator]: [0mInference done 4332/5000. 0.1849 s / img. ETA=0:02:46
[32m[02/04 23:29:27 d2.evaluation.evaluator]: [0mInference done 4354/5000. 0.1849 s / img. ETA=0:02:41
[32m[02/04 23:29:32 d2.evaluation.evaluator]: [0mInference done 4375/5000. 0.1849 s / img. ETA=0:02:35
[32m[02/04 23:29:37 d2.evaluation.evaluator]: [0mInference done 4395/5000. 0.1849 s / img. ETA=0:02:30
[32m[02/04 23:29:42 d2.evaluation.evaluator]: [0mInference done 4416/5000. 0.1849 s / img. ETA=0:02:25
[32m[02/04 23:29:48 d2.evaluation.evaluator]: [0mInference done 4437/5000. 0.1848 s / img. ETA=0:02:20
[32m[02/04 23:29:53 d2.evaluation.evaluator]: [0mInference done 4458/5000. 0.1849 s / img. ETA=0:02:15
[32m[02/04 23:29:58 d2.evaluation.evaluator]: [0mInference done 4479/5000. 0.1848 s / img. ETA=0:02:09
[32m[02/04 23:30:03 d2.evaluation.evaluator]: [0mInference done 4499/5000. 0.1848 s / img. ETA=0:02:04
[32m[02/04 23:30:08 d2.evaluation.evaluator]: [0mInference done 4520/5000. 0.1848 s / img. ETA=0:01:59
[32m[02/04 23:30:13 d2.evaluation.evaluator]: [0mInference done 4541/5000. 0.1848 s / img. ETA=0:01:54
[32m[02/04 23:30:18 d2.evaluation.evaluator]: [0mInference done 4561/5000. 0.1848 s / img. ETA=0:01:49
[32m[02/04 23:30:23 d2.evaluation.evaluator]: [0mInference done 4580/5000. 0.1848 s / img. ETA=0:01:44
[32m[02/04 23:30:28 d2.evaluation.evaluator]: [0mInference done 4601/5000. 0.1848 s / img. ETA=0:01:39
[32m[02/04 23:30:33 d2.evaluation.evaluator]: [0mInference done 4622/5000. 0.1848 s / img. ETA=0:01:34
[32m[02/04 23:30:39 d2.evaluation.evaluator]: [0mInference done 4644/5000. 0.1848 s / img. ETA=0:01:28
[32m[02/04 23:30:44 d2.evaluation.evaluator]: [0mInference done 4664/5000. 0.1848 s / img. ETA=0:01:23
[32m[02/04 23:30:49 d2.evaluation.evaluator]: [0mInference done 4685/5000. 0.1848 s / img. ETA=0:01:18
[32m[02/04 23:30:54 d2.evaluation.evaluator]: [0mInference done 4705/5000. 0.1848 s / img. ETA=0:01:13
[32m[02/04 23:30:59 d2.evaluation.evaluator]: [0mInference done 4725/5000. 0.1848 s / img. ETA=0:01:08
[32m[02/04 23:31:04 d2.evaluation.evaluator]: [0mInference done 4746/5000. 0.1848 s / img. ETA=0:01:03
[32m[02/04 23:31:09 d2.evaluation.evaluator]: [0mInference done 4767/5000. 0.1848 s / img. ETA=0:00:58
[32m[02/04 23:31:14 d2.evaluation.evaluator]: [0mInference done 4788/5000. 0.1848 s / img. ETA=0:00:52
[32m[02/04 23:31:19 d2.evaluation.evaluator]: [0mInference done 4807/5000. 0.1848 s / img. ETA=0:00:48
[32m[02/04 23:31:25 d2.evaluation.evaluator]: [0mInference done 4829/5000. 0.1848 s / img. ETA=0:00:42
[32m[02/04 23:31:30 d2.evaluation.evaluator]: [0mInference done 4850/5000. 0.1848 s / img. ETA=0:00:37
[32m[02/04 23:31:35 d2.evaluation.evaluator]: [0mInference done 4871/5000. 0.1848 s / img. ETA=0:00:32
[32m[02/04 23:31:40 d2.evaluation.evaluator]: [0mInference done 4892/5000. 0.1848 s / img. ETA=0:00:26
[32m[02/04 23:31:45 d2.evaluation.evaluator]: [0mInference done 4912/5000. 0.1848 s / img. ETA=0:00:21
[32m[02/04 23:31:50 d2.evaluation.evaluator]: [0mInference done 4931/5000. 0.1848 s / img. ETA=0:00:17
[32m[02/04 23:31:55 d2.evaluation.evaluator]: [0mInference done 4953/5000. 0.1848 s / img. ETA=0:00:11
[32m[02/04 23:32:00 d2.evaluation.evaluator]: [0mInference done 4974/5000. 0.1848 s / img. ETA=0:00:06
[32m[02/04 23:32:06 d2.evaluation.evaluator]: [0mInference done 4994/5000. 0.1848 s / img. ETA=0:00:01
[32m[02/04 23:32:07 d2.evaluation.evaluator]: [0mTotal inference time: 0:20:45.076469 (0.249265 s / img per device, on 1 devices)
[32m[02/04 23:32:07 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:15:23 (0.184820 s / img per device, on 1 devices)
[32m[02/04 23:32:08 d2.evaluation.sem_seg_evaluation]: [0mOrderedDict([('sem_seg', {'mIoU': 44.51184092552896, 'fwIoU': 70.44521743292603, 'mACC': 56.26877933682365, 'pACC': 81.61562841751885})])
[32m[02/04 23:32:09 d2.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[02/04 23:32:09 d2.evaluation.coco_evaluation]: [0mSaving results to ./output/inference/coco_instances_results.json
[32m[02/04 23:32:10 d2.evaluation.coco_evaluation]: [0mEvaluating predictions ...
Loading and preparing results...
DONE (t=0.11s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=30.74s).
Accumulating evaluation results...
DONE (t=3.83s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.424
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.630
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.463
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.251
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.462
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.554
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.342
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.537
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.363
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.598
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.713
[32m[02/04 23:32:45 d2.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 42.406 | 63.049 | 46.257 | 25.061 | 46.196 | 55.365 |
[32m[02/04 23:32:45 d2.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 56.521 | bicycle      | 32.436 | car            | 45.466 |
| motorcycle    | 44.124 | airplane     | 64.820 | bus            | 65.930 |
| train         | 65.092 | truck        | 37.478 | boat           | 29.651 |
| traffic light | 27.643 | fire hydrant | 67.637 | stop sign      | 67.780 |
| parking meter | 47.470 | bench        | 25.324 | bird           | 37.181 |
| cat           | 67.206 | dog          | 59.869 | horse          | 58.343 |
| sheep         | 53.223 | cow          | 55.069 | elephant       | 61.989 |
| bear          | 68.786 | zebra        | 67.670 | giraffe        | 66.851 |
| backpack      | 17.642 | umbrella     | 38.880 | handbag        | 17.340 |
| tie           | 36.683 | suitcase     | 41.435 | frisbee        | 63.256 |
| skis          | 25.425 | snowboard    | 38.248 | sports ball    | 48.718 |
| kite          | 42.907 | baseball bat | 26.679 | baseball glove | 37.088 |
| skateboard    | 54.474 | surfboard    | 38.509 | tennis racket  | 47.937 |
| bottle        | 41.130 | wine glass   | 36.947 | cup            | 43.775 |
| fork          | 38.080 | knife        | 18.838 | spoon          | 18.667 |
| bowl          | 44.366 | banana       | 25.141 | apple          | 21.900 |
| sandwich      | 36.497 | orange       | 33.006 | broccoli       | 24.839 |
| carrot        | 23.338 | hot dog      | 29.843 | pizza          | 52.420 |
| donut         | 45.845 | cake         | 38.550 | chair          | 28.951 |
| couch         | 42.719 | potted plant | 28.721 | bed            | 41.776 |
| dining table  | 30.344 | toilet       | 59.669 | tv             | 58.464 |
| laptop        | 61.114 | mouse        | 62.497 | remote         | 32.044 |
| keyboard      | 54.135 | cell phone   | 35.994 | microwave      | 56.048 |
| oven          | 34.488 | toaster      | 42.814 | sink           | 38.185 |
| refrigerator  | 58.107 | book         | 17.162 | clock          | 52.075 |
| vase          | 38.438 | scissors     | 21.829 | teddy bear     | 46.076 |
| hair drier    | 6.948  | toothbrush   | 21.911 |                |        |
Loading and preparing results...
DONE (t=1.52s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=33.80s).
Accumulating evaluation results...
DONE (t=4.05s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.385
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.601
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.414
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.191
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.412
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.554
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.319
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.491
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.511
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.316
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.548
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.667
[32m[02/04 23:33:28 d2.evaluation.coco_evaluation]: [0mEvaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 38.452 | 60.142 | 41.439 | 19.126 | 41.220 | 55.449 |
[32m[02/04 23:33:28 d2.evaluation.coco_evaluation]: [0mPer-category segm AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 48.378 | bicycle      | 19.751 | car            | 41.856 |
| motorcycle    | 34.709 | airplane     | 51.365 | bus            | 64.545 |
| train         | 63.141 | truck        | 37.151 | boat           | 26.376 |
| traffic light | 26.999 | fire hydrant | 63.721 | stop sign      | 66.976 |
| parking meter | 48.375 | bench        | 19.099 | bird           | 31.277 |
| cat           | 67.242 | dog          | 57.537 | horse          | 41.618 |
| sheep         | 44.534 | cow          | 47.106 | elephant       | 58.274 |
| bear          | 68.221 | zebra        | 58.405 | giraffe        | 50.257 |
| backpack      | 16.897 | umbrella     | 47.163 | handbag        | 16.690 |
| tie           | 33.920 | suitcase     | 44.060 | frisbee        | 61.794 |
| skis          | 3.363  | snowboard    | 22.738 | sports ball    | 47.583 |
| kite          | 31.009 | baseball bat | 24.219 | baseball glove | 38.545 |
| skateboard    | 33.280 | surfboard    | 32.166 | tennis racket  | 54.392 |
| bottle        | 39.635 | wine glass   | 33.344 | cup            | 44.519 |
| fork          | 18.803 | knife        | 12.974 | spoon          | 13.322 |
| bowl          | 41.487 | banana       | 21.015 | apple          | 21.133 |
| sandwich      | 38.763 | orange       | 32.194 | broccoli       | 24.301 |
| carrot        | 20.926 | hot dog      | 25.175 | pizza          | 50.846 |
| donut         | 46.054 | cake         | 38.609 | chair          | 19.971 |
| couch         | 36.682 | potted plant | 24.472 | bed            | 33.601 |
| dining table  | 17.006 | toilet       | 59.583 | tv             | 61.316 |
| laptop        | 61.183 | mouse        | 62.926 | remote         | 31.105 |
| keyboard      | 53.310 | cell phone   | 34.407 | microwave      | 57.583 |
| oven          | 33.387 | toaster      | 47.419 | sink           | 36.174 |
| refrigerator  | 59.100 | book         | 11.589 | clock          | 52.038 |
| vase          | 37.764 | scissors     | 17.145 | teddy bear     | 43.621 |
| hair drier    | 2.895  | toothbrush   | 14.042 |                |        |
[32m[02/04 23:33:28 d2.evaluation.panoptic_evaluation]: [0mWriting all panoptic predictions to /tmp/panoptic_eval5w5awopp ...
[32m[02/04 23:34:41 d2.evaluation.panoptic_evaluation]: [0mPanoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 43.019 | 79.992 | 52.064 |      133      |
| Things | 49.696 | 82.879 | 59.220 |      80       |
| Stuff  | 32.940 | 75.633 | 41.263 |      53       |
[32m[02/04 23:34:41 d2.engine.defaults]: [0mEvaluation results for coco_2017_val_panoptic_separated in csv format:
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: Task: sem_seg
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: mIoU,fwIoU,mACC,pACC
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: 44.5118,70.4452,56.2688,81.6156
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: 42.4059,63.0489,46.2567,25.0614,46.1962,55.3651
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: Task: segm
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: 38.4518,60.1418,41.4386,19.1256,41.2200,55.4492
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: Task: panoptic_seg
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[32m[02/04 23:34:41 d2.evaluation.testing]: [0mcopypaste: 43.0185,79.9918,52.0641,49.6958,82.8793,59.2198,32.9396,75.6334,41.2631
