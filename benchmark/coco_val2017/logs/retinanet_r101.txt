Command Line Args: Namespace(config_file='configs/COCO-Detection/retinanet_R_101_FPN_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'detectron2://COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl'], resume=False)
[32m[01/30 21:26:09 detectron2]: [0mRank of current process: 0. World size: 1
[32m[01/30 21:26:09 detectron2]: [0mEnvironment info:
------------------------  ---------------------------------------------------------------
sys.platform              linux
Python                    3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                     1.17.5
detectron2                0.1 @/content/detectron2_repo/detectron2
detectron2 compiler       GCC 7.4
detectron2 CUDA compiler  10.0
detectron2 arch flags     sm_75
DETECTRON2_ENV_MODULE     <not set>
PyTorch                   1.4.0+cu100 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build       False
CUDA available            True
GPU 0                     Tesla T4
CUDA_HOME                 /usr/local/cuda
NVCC                      Cuda compilation tools, release 10.0, V10.0.130
Pillow                    6.2.2
torchvision               0.5.0+cu100 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags    sm_35, sm_50, sm_60, sm_70, sm_75
cv2                       4.1.2
------------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[32m[01/30 21:26:09 detectron2]: [0mCommand line arguments: Namespace(config_file='configs/COCO-Detection/retinanet_R_101_FPN_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'detectron2://COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl'], resume=False)
[32m[01/30 21:26:09 detectron2]: [0mContents of args.config_file=configs/COCO-Detection/retinanet_R_101_FPN_3x.yaml:
_BASE_: "../Base-RetinaNet.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-101.pkl"
  RESNETS:
    DEPTH: 101
SOLVER:
  STEPS: (210000, 250000)
  MAX_ITER: 270000

[32m[01/30 21:26:09 detectron2]: [0mRunning with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32, 40.31747359663594, 50.79683366298238], [64, 80.63494719327188, 101.59366732596476], [128, 161.26989438654377, 203.18733465192952], [256, 322.53978877308754, 406.37466930385904], [512, 645.0795775461751, 812.7493386077181]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_retinanet_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: False
  META_ARCHITECTURE: RetinaNet
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 101
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: 
    NORM: 
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['res4']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['res4']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  BASE_LR: 0.01
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 270000
  MOMENTUM: 0.9
  STEPS: (210000, 250000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[32m[01/30 21:26:09 detectron2]: [0mFull config saved to /content/detectron2_repo/output/config.yaml
[32m[01/30 21:26:09 d2.utils.env]: [0mUsing a generated random seed 9562688
[32m[01/30 21:26:14 d2.engine.defaults]: [0mModel:
RetinaNet(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(2048, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (head): RetinaNetHead(
    (cls_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (bbox_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (cls_score): Conv2d(256, 720, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bbox_pred): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
)
[32m[01/30 21:26:14 fvcore.common.checkpoint]: [0mLoading checkpoint from detectron2://COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl
[32m[01/30 21:26:14 fvcore.common.file_io]: [0mDownloading https://dl.fbaipublicfiles.com/detectron2/COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl ...
[32m[01/30 21:26:14 fvcore.common.download]: [0mDownloading from https://dl.fbaipublicfiles.com/detectron2/COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl ...
[32m[01/30 21:26:28 fvcore.common.download]: [0mSuccessfully downloaded /root/.torch/fvcore_cache/detectron2/COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl. 228343351 bytes.
[32m[01/30 21:26:28 fvcore.common.file_io]: [0mURL https://dl.fbaipublicfiles.com/detectron2/COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl cached in /root/.torch/fvcore_cache/detectron2/COCO-Detection/retinanet_R_101_FPN_3x/138363263/model_final_59f53c.pkl
[32m[01/30 21:26:28 fvcore.common.checkpoint]: [0mReading a file from 'Detectron2 Model Zoo'
[32m[01/30 21:26:29 d2.data.datasets.coco]: [0mLoaded 5000 images in COCO format from datasets/coco/annotations/instances_val2017.json
[32m[01/30 21:26:30 d2.data.build]: [0mDistribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 10777        |   bicycle    | 314          |      car      | 1918         |
|  motorcycle   | 367          |   airplane   | 143          |      bus      | 283          |
|     train     | 190          |    truck     | 414          |     boat      | 424          |
| traffic light | 634          | fire hydrant | 101          |   stop sign   | 75           |
| parking meter | 60           |    bench     | 411          |     bird      | 427          |
|      cat      | 202          |     dog      | 218          |     horse     | 272          |
|     sheep     | 354          |     cow      | 372          |   elephant    | 252          |
|     bear      | 71           |    zebra     | 266          |    giraffe    | 232          |
|   backpack    | 371          |   umbrella   | 407          |    handbag    | 540          |
|      tie      | 252          |   suitcase   | 299          |    frisbee    | 115          |
|     skis      | 241          |  snowboard   | 69           |  sports ball  | 260          |
|     kite      | 327          | baseball bat | 145          | baseball gl.. | 148          |
|  skateboard   | 179          |  surfboard   | 267          | tennis racket | 225          |
|    bottle     | 1013         |  wine glass  | 341          |      cup      | 895          |
|     fork      | 215          |    knife     | 325          |     spoon     | 253          |
|     bowl      | 623          |    banana    | 370          |     apple     | 236          |
|   sandwich    | 177          |    orange    | 285          |   broccoli    | 312          |
|    carrot     | 365          |   hot dog    | 125          |     pizza     | 284          |
|     donut     | 328          |     cake     | 310          |     chair     | 1771         |
|     couch     | 261          | potted plant | 342          |      bed      | 163          |
| dining table  | 695          |    toilet    | 179          |      tv       | 288          |
|    laptop     | 231          |    mouse     | 106          |    remote     | 283          |
|   keyboard    | 153          |  cell phone  | 262          |   microwave   | 55           |
|     oven      | 143          |   toaster    | 9            |     sink      | 225          |
| refrigerator  | 126          |     book     | 1129         |     clock     | 267          |
|     vase      | 274          |   scissors   | 36           |  teddy bear   | 190          |
|  hair drier   | 11           |  toothbrush  | 57           |               |              |
|     total     | 36335        |              |              |               |              |[0m
[32m[01/30 21:26:30 d2.evaluation.evaluator]: [0mStart inference on 5000 images
[32m[01/30 21:26:33 d2.evaluation.evaluator]: [0mInference done 11/5000. 0.1970 s / img. ETA=0:16:38
[32m[01/30 21:26:38 d2.evaluation.evaluator]: [0mInference done 36/5000. 0.1980 s / img. ETA=0:16:36
[32m[01/30 21:26:43 d2.evaluation.evaluator]: [0mInference done 61/5000. 0.1994 s / img. ETA=0:16:38
[32m[01/30 21:26:48 d2.evaluation.evaluator]: [0mInference done 86/5000. 0.1992 s / img. ETA=0:16:32
[32m[01/30 21:26:53 d2.evaluation.evaluator]: [0mInference done 112/5000. 0.1976 s / img. ETA=0:16:19
[32m[01/30 21:26:59 d2.evaluation.evaluator]: [0mInference done 137/5000. 0.1991 s / img. ETA=0:16:21
[32m[01/30 21:27:04 d2.evaluation.evaluator]: [0mInference done 161/5000. 0.2002 s / img. ETA=0:16:21
[32m[01/30 21:27:09 d2.evaluation.evaluator]: [0mInference done 186/5000. 0.2000 s / img. ETA=0:16:15
[32m[01/30 21:27:14 d2.evaluation.evaluator]: [0mInference done 211/5000. 0.2004 s / img. ETA=0:16:12
[32m[01/30 21:27:19 d2.evaluation.evaluator]: [0mInference done 236/5000. 0.2005 s / img. ETA=0:16:07
[32m[01/30 21:27:24 d2.evaluation.evaluator]: [0mInference done 260/5000. 0.2013 s / img. ETA=0:16:06
[32m[01/30 21:27:29 d2.evaluation.evaluator]: [0mInference done 285/5000. 0.2011 s / img. ETA=0:16:00
[32m[01/30 21:27:34 d2.evaluation.evaluator]: [0mInference done 309/5000. 0.2015 s / img. ETA=0:15:57
[32m[01/30 21:27:39 d2.evaluation.evaluator]: [0mInference done 333/5000. 0.2019 s / img. ETA=0:15:54
[32m[01/30 21:27:44 d2.evaluation.evaluator]: [0mInference done 357/5000. 0.2027 s / img. ETA=0:15:53
[32m[01/30 21:27:49 d2.evaluation.evaluator]: [0mInference done 382/5000. 0.2029 s / img. ETA=0:15:49
[32m[01/30 21:27:55 d2.evaluation.evaluator]: [0mInference done 407/5000. 0.2029 s / img. ETA=0:15:44
[32m[01/30 21:28:00 d2.evaluation.evaluator]: [0mInference done 431/5000. 0.2031 s / img. ETA=0:15:40
[32m[01/30 21:28:05 d2.evaluation.evaluator]: [0mInference done 455/5000. 0.2033 s / img. ETA=0:15:36
[32m[01/30 21:28:10 d2.evaluation.evaluator]: [0mInference done 478/5000. 0.2039 s / img. ETA=0:15:34
[32m[01/30 21:28:15 d2.evaluation.evaluator]: [0mInference done 502/5000. 0.2044 s / img. ETA=0:15:31
[32m[01/30 21:28:20 d2.evaluation.evaluator]: [0mInference done 527/5000. 0.2045 s / img. ETA=0:15:26
[32m[01/30 21:28:25 d2.evaluation.evaluator]: [0mInference done 551/5000. 0.2047 s / img. ETA=0:15:22
[32m[01/30 21:28:30 d2.evaluation.evaluator]: [0mInference done 575/5000. 0.2049 s / img. ETA=0:15:18
[32m[01/30 21:28:35 d2.evaluation.evaluator]: [0mInference done 600/5000. 0.2050 s / img. ETA=0:15:13
[32m[01/30 21:28:41 d2.evaluation.evaluator]: [0mInference done 623/5000. 0.2054 s / img. ETA=0:15:10
[32m[01/30 21:28:46 d2.evaluation.evaluator]: [0mInference done 647/5000. 0.2055 s / img. ETA=0:15:06
[32m[01/30 21:28:51 d2.evaluation.evaluator]: [0mInference done 671/5000. 0.2058 s / img. ETA=0:15:02
[32m[01/30 21:28:56 d2.evaluation.evaluator]: [0mInference done 695/5000. 0.2060 s / img. ETA=0:14:58
[32m[01/30 21:29:01 d2.evaluation.evaluator]: [0mInference done 718/5000. 0.2064 s / img. ETA=0:14:55
[32m[01/30 21:29:06 d2.evaluation.evaluator]: [0mInference done 742/5000. 0.2066 s / img. ETA=0:14:51
[32m[01/30 21:29:11 d2.evaluation.evaluator]: [0mInference done 766/5000. 0.2068 s / img. ETA=0:14:47
[32m[01/30 21:29:16 d2.evaluation.evaluator]: [0mInference done 789/5000. 0.2071 s / img. ETA=0:14:43
[32m[01/30 21:29:21 d2.evaluation.evaluator]: [0mInference done 812/5000. 0.2073 s / img. ETA=0:14:39
[32m[01/30 21:29:27 d2.evaluation.evaluator]: [0mInference done 836/5000. 0.2074 s / img. ETA=0:14:34
[32m[01/30 21:29:32 d2.evaluation.evaluator]: [0mInference done 859/5000. 0.2077 s / img. ETA=0:14:31
[32m[01/30 21:29:37 d2.evaluation.evaluator]: [0mInference done 882/5000. 0.2079 s / img. ETA=0:14:27
[32m[01/30 21:29:42 d2.evaluation.evaluator]: [0mInference done 906/5000. 0.2080 s / img. ETA=0:14:22
[32m[01/30 21:29:47 d2.evaluation.evaluator]: [0mInference done 930/5000. 0.2081 s / img. ETA=0:14:17
[32m[01/30 21:29:52 d2.evaluation.evaluator]: [0mInference done 953/5000. 0.2084 s / img. ETA=0:14:14
[32m[01/30 21:29:57 d2.evaluation.evaluator]: [0mInference done 977/5000. 0.2085 s / img. ETA=0:14:09
[32m[01/30 21:30:02 d2.evaluation.evaluator]: [0mInference done 1000/5000. 0.2087 s / img. ETA=0:14:05
[32m[01/30 21:30:07 d2.evaluation.evaluator]: [0mInference done 1024/5000. 0.2087 s / img. ETA=0:14:00
[32m[01/30 21:30:12 d2.evaluation.evaluator]: [0mInference done 1047/5000. 0.2089 s / img. ETA=0:13:56
[32m[01/30 21:30:18 d2.evaluation.evaluator]: [0mInference done 1070/5000. 0.2092 s / img. ETA=0:13:52
[32m[01/30 21:30:23 d2.evaluation.evaluator]: [0mInference done 1093/5000. 0.2094 s / img. ETA=0:13:48
[32m[01/30 21:30:28 d2.evaluation.evaluator]: [0mInference done 1116/5000. 0.2096 s / img. ETA=0:13:44
[32m[01/30 21:30:33 d2.evaluation.evaluator]: [0mInference done 1138/5000. 0.2099 s / img. ETA=0:13:40
[32m[01/30 21:30:38 d2.evaluation.evaluator]: [0mInference done 1161/5000. 0.2100 s / img. ETA=0:13:36
[32m[01/30 21:30:43 d2.evaluation.evaluator]: [0mInference done 1184/5000. 0.2102 s / img. ETA=0:13:32
[32m[01/30 21:30:48 d2.evaluation.evaluator]: [0mInference done 1207/5000. 0.2105 s / img. ETA=0:13:28
[32m[01/30 21:30:53 d2.evaluation.evaluator]: [0mInference done 1230/5000. 0.2106 s / img. ETA=0:13:23
[32m[01/30 21:30:58 d2.evaluation.evaluator]: [0mInference done 1253/5000. 0.2107 s / img. ETA=0:13:19
[32m[01/30 21:31:03 d2.evaluation.evaluator]: [0mInference done 1276/5000. 0.2108 s / img. ETA=0:13:15
[32m[01/30 21:31:08 d2.evaluation.evaluator]: [0mInference done 1299/5000. 0.2109 s / img. ETA=0:13:10
[32m[01/30 21:31:14 d2.evaluation.evaluator]: [0mInference done 1323/5000. 0.2110 s / img. ETA=0:13:05
[32m[01/30 21:31:19 d2.evaluation.evaluator]: [0mInference done 1346/5000. 0.2112 s / img. ETA=0:13:01
[32m[01/30 21:31:24 d2.evaluation.evaluator]: [0mInference done 1369/5000. 0.2113 s / img. ETA=0:12:57
[32m[01/30 21:31:29 d2.evaluation.evaluator]: [0mInference done 1393/5000. 0.2114 s / img. ETA=0:12:52
[32m[01/30 21:31:34 d2.evaluation.evaluator]: [0mInference done 1416/5000. 0.2115 s / img. ETA=0:12:47
[32m[01/30 21:31:39 d2.evaluation.evaluator]: [0mInference done 1438/5000. 0.2117 s / img. ETA=0:12:43
[32m[01/30 21:31:44 d2.evaluation.evaluator]: [0mInference done 1461/5000. 0.2118 s / img. ETA=0:12:39
[32m[01/30 21:31:49 d2.evaluation.evaluator]: [0mInference done 1484/5000. 0.2119 s / img. ETA=0:12:34
[32m[01/30 21:31:54 d2.evaluation.evaluator]: [0mInference done 1508/5000. 0.2119 s / img. ETA=0:12:29
[32m[01/30 21:31:59 d2.evaluation.evaluator]: [0mInference done 1531/5000. 0.2119 s / img. ETA=0:12:24
[32m[01/30 21:32:05 d2.evaluation.evaluator]: [0mInference done 1553/5000. 0.2122 s / img. ETA=0:12:20
[32m[01/30 21:32:10 d2.evaluation.evaluator]: [0mInference done 1576/5000. 0.2123 s / img. ETA=0:12:15
[32m[01/30 21:32:15 d2.evaluation.evaluator]: [0mInference done 1598/5000. 0.2125 s / img. ETA=0:12:11
[32m[01/30 21:32:20 d2.evaluation.evaluator]: [0mInference done 1621/5000. 0.2126 s / img. ETA=0:12:07
[32m[01/30 21:32:25 d2.evaluation.evaluator]: [0mInference done 1644/5000. 0.2127 s / img. ETA=0:12:02
[32m[01/30 21:32:30 d2.evaluation.evaluator]: [0mInference done 1667/5000. 0.2128 s / img. ETA=0:11:58
[32m[01/30 21:32:35 d2.evaluation.evaluator]: [0mInference done 1690/5000. 0.2129 s / img. ETA=0:11:53
[32m[01/30 21:32:40 d2.evaluation.evaluator]: [0mInference done 1713/5000. 0.2130 s / img. ETA=0:11:48
[32m[01/30 21:32:45 d2.evaluation.evaluator]: [0mInference done 1736/5000. 0.2130 s / img. ETA=0:11:44
[32m[01/30 21:32:50 d2.evaluation.evaluator]: [0mInference done 1758/5000. 0.2132 s / img. ETA=0:11:39
[32m[01/30 21:32:56 d2.evaluation.evaluator]: [0mInference done 1782/5000. 0.2132 s / img. ETA=0:11:34
[32m[01/30 21:33:01 d2.evaluation.evaluator]: [0mInference done 1805/5000. 0.2133 s / img. ETA=0:11:29
[32m[01/30 21:33:06 d2.evaluation.evaluator]: [0mInference done 1828/5000. 0.2134 s / img. ETA=0:11:25
[32m[01/30 21:33:11 d2.evaluation.evaluator]: [0mInference done 1852/5000. 0.2134 s / img. ETA=0:11:20
[32m[01/30 21:33:16 d2.evaluation.evaluator]: [0mInference done 1875/5000. 0.2135 s / img. ETA=0:11:15
[32m[01/30 21:33:21 d2.evaluation.evaluator]: [0mInference done 1898/5000. 0.2136 s / img. ETA=0:11:10
[32m[01/30 21:33:26 d2.evaluation.evaluator]: [0mInference done 1921/5000. 0.2137 s / img. ETA=0:11:06
[32m[01/30 21:33:32 d2.evaluation.evaluator]: [0mInference done 1944/5000. 0.2137 s / img. ETA=0:11:01
[32m[01/30 21:33:37 d2.evaluation.evaluator]: [0mInference done 1967/5000. 0.2138 s / img. ETA=0:10:56
[32m[01/30 21:33:42 d2.evaluation.evaluator]: [0mInference done 1990/5000. 0.2139 s / img. ETA=0:10:51
[32m[01/30 21:33:47 d2.evaluation.evaluator]: [0mInference done 2013/5000. 0.2140 s / img. ETA=0:10:47
[32m[01/30 21:33:52 d2.evaluation.evaluator]: [0mInference done 2036/5000. 0.2140 s / img. ETA=0:10:42
[32m[01/30 21:33:57 d2.evaluation.evaluator]: [0mInference done 2059/5000. 0.2141 s / img. ETA=0:10:37
[32m[01/30 21:34:02 d2.evaluation.evaluator]: [0mInference done 2081/5000. 0.2142 s / img. ETA=0:10:32
[32m[01/30 21:34:07 d2.evaluation.evaluator]: [0mInference done 2104/5000. 0.2142 s / img. ETA=0:10:28
[32m[01/30 21:34:12 d2.evaluation.evaluator]: [0mInference done 2127/5000. 0.2143 s / img. ETA=0:10:23
[32m[01/30 21:34:17 d2.evaluation.evaluator]: [0mInference done 2150/5000. 0.2143 s / img. ETA=0:10:18
[32m[01/30 21:34:22 d2.evaluation.evaluator]: [0mInference done 2173/5000. 0.2143 s / img. ETA=0:10:13
[32m[01/30 21:34:27 d2.evaluation.evaluator]: [0mInference done 2196/5000. 0.2144 s / img. ETA=0:10:08
[32m[01/30 21:34:33 d2.evaluation.evaluator]: [0mInference done 2219/5000. 0.2144 s / img. ETA=0:10:03
[32m[01/30 21:34:38 d2.evaluation.evaluator]: [0mInference done 2242/5000. 0.2145 s / img. ETA=0:09:58
[32m[01/30 21:34:43 d2.evaluation.evaluator]: [0mInference done 2264/5000. 0.2146 s / img. ETA=0:09:54
[32m[01/30 21:34:48 d2.evaluation.evaluator]: [0mInference done 2287/5000. 0.2147 s / img. ETA=0:09:49
[32m[01/30 21:34:53 d2.evaluation.evaluator]: [0mInference done 2311/5000. 0.2147 s / img. ETA=0:09:44
[32m[01/30 21:34:58 d2.evaluation.evaluator]: [0mInference done 2334/5000. 0.2148 s / img. ETA=0:09:39
[32m[01/30 21:35:03 d2.evaluation.evaluator]: [0mInference done 2356/5000. 0.2149 s / img. ETA=0:09:35
[32m[01/30 21:35:09 d2.evaluation.evaluator]: [0mInference done 2379/5000. 0.2149 s / img. ETA=0:09:30
[32m[01/30 21:35:14 d2.evaluation.evaluator]: [0mInference done 2402/5000. 0.2150 s / img. ETA=0:09:25
[32m[01/30 21:35:19 d2.evaluation.evaluator]: [0mInference done 2425/5000. 0.2150 s / img. ETA=0:09:20
[32m[01/30 21:35:24 d2.evaluation.evaluator]: [0mInference done 2447/5000. 0.2151 s / img. ETA=0:09:16
[32m[01/30 21:35:29 d2.evaluation.evaluator]: [0mInference done 2470/5000. 0.2152 s / img. ETA=0:09:11
[32m[01/30 21:35:34 d2.evaluation.evaluator]: [0mInference done 2494/5000. 0.2152 s / img. ETA=0:09:05
[32m[01/30 21:35:39 d2.evaluation.evaluator]: [0mInference done 2518/5000. 0.2152 s / img. ETA=0:09:00
[32m[01/30 21:35:45 d2.evaluation.evaluator]: [0mInference done 2541/5000. 0.2152 s / img. ETA=0:08:55
[32m[01/30 21:35:50 d2.evaluation.evaluator]: [0mInference done 2564/5000. 0.2153 s / img. ETA=0:08:50
[32m[01/30 21:35:55 d2.evaluation.evaluator]: [0mInference done 2587/5000. 0.2153 s / img. ETA=0:08:46
[32m[01/30 21:36:00 d2.evaluation.evaluator]: [0mInference done 2610/5000. 0.2154 s / img. ETA=0:08:41
[32m[01/30 21:36:05 d2.evaluation.evaluator]: [0mInference done 2633/5000. 0.2154 s / img. ETA=0:08:36
[32m[01/30 21:36:10 d2.evaluation.evaluator]: [0mInference done 2656/5000. 0.2155 s / img. ETA=0:08:31
[32m[01/30 21:36:15 d2.evaluation.evaluator]: [0mInference done 2679/5000. 0.2155 s / img. ETA=0:08:26
[32m[01/30 21:36:21 d2.evaluation.evaluator]: [0mInference done 2702/5000. 0.2156 s / img. ETA=0:08:21
[32m[01/30 21:36:26 d2.evaluation.evaluator]: [0mInference done 2725/5000. 0.2157 s / img. ETA=0:08:16
[32m[01/30 21:36:31 d2.evaluation.evaluator]: [0mInference done 2749/5000. 0.2156 s / img. ETA=0:08:11
[32m[01/30 21:36:36 d2.evaluation.evaluator]: [0mInference done 2772/5000. 0.2157 s / img. ETA=0:08:06
[32m[01/30 21:36:41 d2.evaluation.evaluator]: [0mInference done 2795/5000. 0.2157 s / img. ETA=0:08:01
[32m[01/30 21:36:46 d2.evaluation.evaluator]: [0mInference done 2818/5000. 0.2157 s / img. ETA=0:07:56
[32m[01/30 21:36:51 d2.evaluation.evaluator]: [0mInference done 2840/5000. 0.2158 s / img. ETA=0:07:51
[32m[01/30 21:36:57 d2.evaluation.evaluator]: [0mInference done 2863/5000. 0.2159 s / img. ETA=0:07:47
[32m[01/30 21:37:02 d2.evaluation.evaluator]: [0mInference done 2885/5000. 0.2160 s / img. ETA=0:07:42
[32m[01/30 21:37:07 d2.evaluation.evaluator]: [0mInference done 2908/5000. 0.2160 s / img. ETA=0:07:37
[32m[01/30 21:37:12 d2.evaluation.evaluator]: [0mInference done 2931/5000. 0.2160 s / img. ETA=0:07:32
[32m[01/30 21:37:17 d2.evaluation.evaluator]: [0mInference done 2954/5000. 0.2160 s / img. ETA=0:07:27
[32m[01/30 21:37:22 d2.evaluation.evaluator]: [0mInference done 2977/5000. 0.2161 s / img. ETA=0:07:22
[32m[01/30 21:37:27 d2.evaluation.evaluator]: [0mInference done 3000/5000. 0.2161 s / img. ETA=0:07:17
[32m[01/30 21:37:32 d2.evaluation.evaluator]: [0mInference done 3023/5000. 0.2162 s / img. ETA=0:07:12
[32m[01/30 21:37:38 d2.evaluation.evaluator]: [0mInference done 3046/5000. 0.2162 s / img. ETA=0:07:07
[32m[01/30 21:37:43 d2.evaluation.evaluator]: [0mInference done 3068/5000. 0.2163 s / img. ETA=0:07:03
[32m[01/30 21:37:48 d2.evaluation.evaluator]: [0mInference done 3090/5000. 0.2164 s / img. ETA=0:06:58
[32m[01/30 21:37:53 d2.evaluation.evaluator]: [0mInference done 3113/5000. 0.2164 s / img. ETA=0:06:53
[32m[01/30 21:37:58 d2.evaluation.evaluator]: [0mInference done 3135/5000. 0.2164 s / img. ETA=0:06:48
[32m[01/30 21:38:03 d2.evaluation.evaluator]: [0mInference done 3158/5000. 0.2164 s / img. ETA=0:06:43
[32m[01/30 21:38:08 d2.evaluation.evaluator]: [0mInference done 3181/5000. 0.2165 s / img. ETA=0:06:38
[32m[01/30 21:38:13 d2.evaluation.evaluator]: [0mInference done 3204/5000. 0.2165 s / img. ETA=0:06:33
[32m[01/30 21:38:18 d2.evaluation.evaluator]: [0mInference done 3227/5000. 0.2165 s / img. ETA=0:06:28
[32m[01/30 21:38:23 d2.evaluation.evaluator]: [0mInference done 3250/5000. 0.2166 s / img. ETA=0:06:23
[32m[01/30 21:38:29 d2.evaluation.evaluator]: [0mInference done 3273/5000. 0.2166 s / img. ETA=0:06:18
[32m[01/30 21:38:34 d2.evaluation.evaluator]: [0mInference done 3295/5000. 0.2167 s / img. ETA=0:06:14
[32m[01/30 21:38:39 d2.evaluation.evaluator]: [0mInference done 3318/5000. 0.2167 s / img. ETA=0:06:09
[32m[01/30 21:38:44 d2.evaluation.evaluator]: [0mInference done 3341/5000. 0.2167 s / img. ETA=0:06:03
[32m[01/30 21:38:49 d2.evaluation.evaluator]: [0mInference done 3364/5000. 0.2167 s / img. ETA=0:05:58
[32m[01/30 21:38:54 d2.evaluation.evaluator]: [0mInference done 3387/5000. 0.2167 s / img. ETA=0:05:53
[32m[01/30 21:38:59 d2.evaluation.evaluator]: [0mInference done 3410/5000. 0.2167 s / img. ETA=0:05:48
[32m[01/30 21:39:04 d2.evaluation.evaluator]: [0mInference done 3432/5000. 0.2168 s / img. ETA=0:05:44
[32m[01/30 21:39:09 d2.evaluation.evaluator]: [0mInference done 3455/5000. 0.2168 s / img. ETA=0:05:39
[32m[01/30 21:39:14 d2.evaluation.evaluator]: [0mInference done 3478/5000. 0.2168 s / img. ETA=0:05:34
[32m[01/30 21:39:19 d2.evaluation.evaluator]: [0mInference done 3501/5000. 0.2168 s / img. ETA=0:05:29
[32m[01/30 21:39:24 d2.evaluation.evaluator]: [0mInference done 3524/5000. 0.2168 s / img. ETA=0:05:24
[32m[01/30 21:39:30 d2.evaluation.evaluator]: [0mInference done 3547/5000. 0.2169 s / img. ETA=0:05:19
[32m[01/30 21:39:35 d2.evaluation.evaluator]: [0mInference done 3570/5000. 0.2169 s / img. ETA=0:05:14
[32m[01/30 21:39:40 d2.evaluation.evaluator]: [0mInference done 3593/5000. 0.2169 s / img. ETA=0:05:08
[32m[01/30 21:39:45 d2.evaluation.evaluator]: [0mInference done 3616/5000. 0.2169 s / img. ETA=0:05:03
[32m[01/30 21:39:50 d2.evaluation.evaluator]: [0mInference done 3639/5000. 0.2170 s / img. ETA=0:04:58
[32m[01/30 21:39:55 d2.evaluation.evaluator]: [0mInference done 3662/5000. 0.2170 s / img. ETA=0:04:53
[32m[01/30 21:40:00 d2.evaluation.evaluator]: [0mInference done 3685/5000. 0.2170 s / img. ETA=0:04:48
[32m[01/30 21:40:06 d2.evaluation.evaluator]: [0mInference done 3708/5000. 0.2170 s / img. ETA=0:04:43
[32m[01/30 21:40:11 d2.evaluation.evaluator]: [0mInference done 3731/5000. 0.2171 s / img. ETA=0:04:38
[32m[01/30 21:40:16 d2.evaluation.evaluator]: [0mInference done 3754/5000. 0.2171 s / img. ETA=0:04:33
[32m[01/30 21:40:21 d2.evaluation.evaluator]: [0mInference done 3777/5000. 0.2171 s / img. ETA=0:04:28
[32m[01/30 21:40:26 d2.evaluation.evaluator]: [0mInference done 3799/5000. 0.2172 s / img. ETA=0:04:24
[32m[01/30 21:40:31 d2.evaluation.evaluator]: [0mInference done 3822/5000. 0.2172 s / img. ETA=0:04:18
[32m[01/30 21:40:36 d2.evaluation.evaluator]: [0mInference done 3844/5000. 0.2172 s / img. ETA=0:04:14
[32m[01/30 21:40:41 d2.evaluation.evaluator]: [0mInference done 3867/5000. 0.2173 s / img. ETA=0:04:09
[32m[01/30 21:40:47 d2.evaluation.evaluator]: [0mInference done 3890/5000. 0.2173 s / img. ETA=0:04:04
[32m[01/30 21:40:52 d2.evaluation.evaluator]: [0mInference done 3914/5000. 0.2173 s / img. ETA=0:03:58
[32m[01/30 21:40:57 d2.evaluation.evaluator]: [0mInference done 3937/5000. 0.2173 s / img. ETA=0:03:53
[32m[01/30 21:41:02 d2.evaluation.evaluator]: [0mInference done 3960/5000. 0.2173 s / img. ETA=0:03:48
[32m[01/30 21:41:07 d2.evaluation.evaluator]: [0mInference done 3983/5000. 0.2173 s / img. ETA=0:03:43
[32m[01/30 21:41:12 d2.evaluation.evaluator]: [0mInference done 4005/5000. 0.2173 s / img. ETA=0:03:38
[32m[01/30 21:41:17 d2.evaluation.evaluator]: [0mInference done 4028/5000. 0.2173 s / img. ETA=0:03:33
[32m[01/30 21:41:22 d2.evaluation.evaluator]: [0mInference done 4050/5000. 0.2173 s / img. ETA=0:03:29
[32m[01/30 21:41:27 d2.evaluation.evaluator]: [0mInference done 4073/5000. 0.2173 s / img. ETA=0:03:24
[32m[01/30 21:41:32 d2.evaluation.evaluator]: [0mInference done 4096/5000. 0.2173 s / img. ETA=0:03:18
[32m[01/30 21:41:38 d2.evaluation.evaluator]: [0mInference done 4119/5000. 0.2174 s / img. ETA=0:03:13
[32m[01/30 21:41:43 d2.evaluation.evaluator]: [0mInference done 4141/5000. 0.2174 s / img. ETA=0:03:09
[32m[01/30 21:41:48 d2.evaluation.evaluator]: [0mInference done 4164/5000. 0.2174 s / img. ETA=0:03:04
[32m[01/30 21:41:53 d2.evaluation.evaluator]: [0mInference done 4187/5000. 0.2174 s / img. ETA=0:02:59
[32m[01/30 21:41:58 d2.evaluation.evaluator]: [0mInference done 4210/5000. 0.2174 s / img. ETA=0:02:53
[32m[01/30 21:42:03 d2.evaluation.evaluator]: [0mInference done 4233/5000. 0.2175 s / img. ETA=0:02:48
[32m[01/30 21:42:08 d2.evaluation.evaluator]: [0mInference done 4257/5000. 0.2174 s / img. ETA=0:02:43
[32m[01/30 21:42:13 d2.evaluation.evaluator]: [0mInference done 4280/5000. 0.2174 s / img. ETA=0:02:38
[32m[01/30 21:42:18 d2.evaluation.evaluator]: [0mInference done 4303/5000. 0.2175 s / img. ETA=0:02:33
[32m[01/30 21:42:24 d2.evaluation.evaluator]: [0mInference done 4326/5000. 0.2175 s / img. ETA=0:02:28
[32m[01/30 21:42:29 d2.evaluation.evaluator]: [0mInference done 4349/5000. 0.2175 s / img. ETA=0:02:23
[32m[01/30 21:42:34 d2.evaluation.evaluator]: [0mInference done 4372/5000. 0.2175 s / img. ETA=0:02:18
[32m[01/30 21:42:39 d2.evaluation.evaluator]: [0mInference done 4395/5000. 0.2175 s / img. ETA=0:02:13
[32m[01/30 21:42:44 d2.evaluation.evaluator]: [0mInference done 4418/5000. 0.2175 s / img. ETA=0:02:08
[32m[01/30 21:42:49 d2.evaluation.evaluator]: [0mInference done 4441/5000. 0.2175 s / img. ETA=0:02:03
[32m[01/30 21:42:54 d2.evaluation.evaluator]: [0mInference done 4463/5000. 0.2176 s / img. ETA=0:01:58
[32m[01/30 21:42:59 d2.evaluation.evaluator]: [0mInference done 4486/5000. 0.2176 s / img. ETA=0:01:53
[32m[01/30 21:43:04 d2.evaluation.evaluator]: [0mInference done 4509/5000. 0.2176 s / img. ETA=0:01:48
[32m[01/30 21:43:09 d2.evaluation.evaluator]: [0mInference done 4532/5000. 0.2176 s / img. ETA=0:01:43
[32m[01/30 21:43:14 d2.evaluation.evaluator]: [0mInference done 4555/5000. 0.2176 s / img. ETA=0:01:38
[32m[01/30 21:43:20 d2.evaluation.evaluator]: [0mInference done 4578/5000. 0.2176 s / img. ETA=0:01:32
[32m[01/30 21:43:25 d2.evaluation.evaluator]: [0mInference done 4600/5000. 0.2176 s / img. ETA=0:01:28
[32m[01/30 21:43:30 d2.evaluation.evaluator]: [0mInference done 4623/5000. 0.2176 s / img. ETA=0:01:23
[32m[01/30 21:43:35 d2.evaluation.evaluator]: [0mInference done 4646/5000. 0.2176 s / img. ETA=0:01:18
[32m[01/30 21:43:40 d2.evaluation.evaluator]: [0mInference done 4669/5000. 0.2176 s / img. ETA=0:01:12
[32m[01/30 21:43:45 d2.evaluation.evaluator]: [0mInference done 4692/5000. 0.2176 s / img. ETA=0:01:07
[32m[01/30 21:43:50 d2.evaluation.evaluator]: [0mInference done 4715/5000. 0.2176 s / img. ETA=0:01:02
[32m[01/30 21:43:55 d2.evaluation.evaluator]: [0mInference done 4737/5000. 0.2177 s / img. ETA=0:00:57
[32m[01/30 21:44:00 d2.evaluation.evaluator]: [0mInference done 4760/5000. 0.2177 s / img. ETA=0:00:52
[32m[01/30 21:44:05 d2.evaluation.evaluator]: [0mInference done 4783/5000. 0.2177 s / img. ETA=0:00:47
[32m[01/30 21:44:11 d2.evaluation.evaluator]: [0mInference done 4806/5000. 0.2177 s / img. ETA=0:00:42
[32m[01/30 21:44:16 d2.evaluation.evaluator]: [0mInference done 4830/5000. 0.2177 s / img. ETA=0:00:37
[32m[01/30 21:44:21 d2.evaluation.evaluator]: [0mInference done 4852/5000. 0.2177 s / img. ETA=0:00:32
[32m[01/30 21:44:26 d2.evaluation.evaluator]: [0mInference done 4874/5000. 0.2178 s / img. ETA=0:00:27
[32m[01/30 21:44:31 d2.evaluation.evaluator]: [0mInference done 4896/5000. 0.2178 s / img. ETA=0:00:22
[32m[01/30 21:44:36 d2.evaluation.evaluator]: [0mInference done 4919/5000. 0.2178 s / img. ETA=0:00:17
[32m[01/30 21:44:41 d2.evaluation.evaluator]: [0mInference done 4942/5000. 0.2178 s / img. ETA=0:00:12
[32m[01/30 21:44:46 d2.evaluation.evaluator]: [0mInference done 4964/5000. 0.2179 s / img. ETA=0:00:07
[32m[01/30 21:44:51 d2.evaluation.evaluator]: [0mInference done 4987/5000. 0.2179 s / img. ETA=0:00:02
[32m[01/30 21:44:54 d2.evaluation.evaluator]: [0mTotal inference time: 0:18:22.209983 (0.220663 s / img per device, on 1 devices)
[32m[01/30 21:44:54 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:18:08 (0.217872 s / img per device, on 1 devices)
[32m[01/30 21:44:57 d2.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[01/30 21:44:57 d2.evaluation.coco_evaluation]: [0mSaving results to ./output/inference/coco_instances_results.json
[32m[01/30 21:44:59 d2.evaluation.coco_evaluation]: [0mEvaluating predictions ...
Loading and preparing results...
DONE (t=1.41s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=54.39s).
Accumulating evaluation results...
DONE (t=8.24s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.399
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.601
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.428
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.238
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.435
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.517
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.331
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.554
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.356
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.594
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.701
[32m[01/30 21:46:03 d2.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 39.874 | 60.135 | 42.795 | 23.841 | 43.531 | 51.719 |
[32m[01/30 21:46:03 d2.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 52.231 | bicycle      | 31.486 | car            | 41.508 |
| motorcycle    | 44.056 | airplane     | 65.391 | bus            | 64.776 |
| train         | 61.217 | truck        | 35.818 | boat           | 24.572 |
| traffic light | 26.038 | fire hydrant | 67.315 | stop sign      | 64.924 |
| parking meter | 48.344 | bench        | 23.373 | bird           | 35.490 |
| cat           | 65.779 | dog          | 60.037 | horse          | 58.841 |
| sheep         | 48.345 | cow          | 52.377 | elephant       | 60.261 |
| bear          | 71.206 | zebra        | 64.526 | giraffe        | 64.398 |
| backpack      | 16.130 | umbrella     | 38.488 | handbag        | 14.579 |
| tie           | 32.204 | suitcase     | 37.477 | frisbee        | 63.719 |
| skis          | 22.189 | snowboard    | 24.370 | sports ball    | 44.421 |
| kite          | 39.902 | baseball bat | 23.606 | baseball glove | 36.393 |
| skateboard    | 51.384 | surfboard    | 34.589 | tennis racket  | 47.340 |
| bottle        | 35.136 | wine glass   | 34.726 | cup            | 40.881 |
| fork          | 30.504 | knife        | 15.361 | spoon          | 14.223 |
| bowl          | 38.131 | banana       | 23.484 | apple          | 18.822 |
| sandwich      | 34.691 | orange       | 30.969 | broccoli       | 20.139 |
| carrot        | 20.563 | hot dog      | 31.839 | pizza          | 49.829 |
| donut         | 43.027 | cake         | 33.403 | chair          | 26.403 |
| couch         | 41.201 | potted plant | 25.952 | bed            | 41.633 |
| dining table  | 27.095 | toilet       | 59.086 | tv             | 57.025 |
| laptop        | 59.022 | mouse        | 60.614 | remote         | 29.213 |
| keyboard      | 49.051 | cell phone   | 34.898 | microwave      | 57.129 |
| oven          | 34.483 | toaster      | 38.015 | sink           | 34.395 |
| refrigerator  | 51.700 | book         | 12.833 | clock          | 49.160 |
| vase          | 35.451 | scissors     | 30.248 | teddy bear     | 44.092 |
| hair drier    | 0.626  | toothbrush   | 15.784 |                |        |
[32m[01/30 21:46:04 d2.engine.defaults]: [0mEvaluation results for coco_2017_val in csv format:
[32m[01/30 21:46:04 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[01/30 21:46:04 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[01/30 21:46:04 d2.evaluation.testing]: [0mcopypaste: 39.8742,60.1350,42.7946,23.8407,43.5311,51.7192
