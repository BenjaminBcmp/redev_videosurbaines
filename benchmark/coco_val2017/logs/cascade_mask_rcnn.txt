Command Line Args: Namespace(config_file='configs/Misc/cascade_mask_rcnn_R_50_FPN_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'detectron2://Misc/cascade_mask_rcnn_R_50_FPN_3x/144998488/model_final_480dd8.pkl'], resume=False)
[32m[01/30 23:26:03 detectron2]: [0mRank of current process: 0. World size: 1
[32m[01/30 23:26:03 detectron2]: [0mEnvironment info:
------------------------  ---------------------------------------------------------------
sys.platform              linux
Python                    3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
numpy                     1.17.5
detectron2                0.1 @/content/detectron2_repo/detectron2
detectron2 compiler       GCC 7.4
detectron2 CUDA compiler  10.0
detectron2 arch flags     sm_75
DETECTRON2_ENV_MODULE     <not set>
PyTorch                   1.4.0+cu100 @/usr/local/lib/python3.6/dist-packages/torch
PyTorch debug build       False
CUDA available            True
GPU 0                     Tesla T4
CUDA_HOME                 /usr/local/cuda
NVCC                      Cuda compilation tools, release 10.0, V10.0.130
Pillow                    6.2.2
torchvision               0.5.0+cu100 @/usr/local/lib/python3.6/dist-packages/torchvision
torchvision arch flags    sm_35, sm_50, sm_60, sm_70, sm_75
cv2                       4.1.2
------------------------  ---------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CUDA Runtime 10.0
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.1
  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

[32m[01/30 23:26:03 detectron2]: [0mCommand line arguments: Namespace(config_file='configs/Misc/cascade_mask_rcnn_R_50_FPN_3x.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=True, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.WEIGHTS', 'detectron2://Misc/cascade_mask_rcnn_R_50_FPN_3x/144998488/model_final_480dd8.pkl'], resume=False)
[32m[01/30 23:26:03 detectron2]: [0mContents of args.config_file=configs/Misc/cascade_mask_rcnn_R_50_FPN_3x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50
  ROI_HEADS:
    NAME: CascadeROIHeads
  ROI_BOX_HEAD:
    CLS_AGNOSTIC_BBOX_REG: True
  RPN:
    POST_NMS_TOPK_TRAIN: 2000
SOLVER:
  STEPS: (210000, 250000)
  MAX_ITER: 270000

[32m[01/30 23:26:03 detectron2]: [0mRunning with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('coco_2017_val',)
  TRAIN: ('coco_2017_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: True
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: CascadeROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: detectron2://Misc/cascade_mask_rcnn_R_50_FPN_3x/144998488/model_final_480dd8.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 270000
  MOMENTUM: 0.9
  STEPS: (210000, 250000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[32m[01/30 23:26:03 detectron2]: [0mFull config saved to /content/detectron2_repo/output/config.yaml
[32m[01/30 23:26:03 d2.utils.env]: [0mUsing a generated random seed 3588445
[32m[01/30 23:26:08 d2.engine.defaults]: [0mModel:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): CascadeROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): ModuleList(
      (0): FastRCNNConvFCHead(
        (fc1): Linear(in_features=12544, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      )
      (1): FastRCNNConvFCHead(
        (fc1): Linear(in_features=12544, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      )
      (2): FastRCNNConvFCHead(
        (fc1): Linear(in_features=12544, out_features=1024, bias=True)
        (fc2): Linear(in_features=1024, out_features=1024, bias=True)
      )
    )
    (box_predictor): ModuleList(
      (0): FastRCNNOutputLayers(
        (cls_score): Linear(in_features=1024, out_features=81, bias=True)
        (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
      )
      (1): FastRCNNOutputLayers(
        (cls_score): Linear(in_features=1024, out_features=81, bias=True)
        (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
      )
      (2): FastRCNNOutputLayers(
        (cls_score): Linear(in_features=1024, out_features=81, bias=True)
        (bbox_pred): Linear(in_features=1024, out_features=4, bias=True)
      )
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[32m[01/30 23:26:08 fvcore.common.checkpoint]: [0mLoading checkpoint from detectron2://Misc/cascade_mask_rcnn_R_50_FPN_3x/144998488/model_final_480dd8.pkl
[32m[01/30 23:26:08 fvcore.common.file_io]: [0mURL https://dl.fbaipublicfiles.com/detectron2/Misc/cascade_mask_rcnn_R_50_FPN_3x/144998488/model_final_480dd8.pkl cached in /root/.torch/fvcore_cache/detectron2/Misc/cascade_mask_rcnn_R_50_FPN_3x/144998488/model_final_480dd8.pkl
[32m[01/30 23:26:08 fvcore.common.checkpoint]: [0mReading a file from 'Detectron2 Model Zoo'
[32m[01/30 23:26:09 d2.data.datasets.coco]: [0mLoaded 5000 images in COCO format from datasets/coco/annotations/instances_val2017.json
[32m[01/30 23:26:09 d2.data.build]: [0mDistribution of instances among all 80 categories:
[36m|   category    | #instances   |   category   | #instances   |   category    | #instances   |
|:-------------:|:-------------|:------------:|:-------------|:-------------:|:-------------|
|    person     | 10777        |   bicycle    | 314          |      car      | 1918         |
|  motorcycle   | 367          |   airplane   | 143          |      bus      | 283          |
|     train     | 190          |    truck     | 414          |     boat      | 424          |
| traffic light | 634          | fire hydrant | 101          |   stop sign   | 75           |
| parking meter | 60           |    bench     | 411          |     bird      | 427          |
|      cat      | 202          |     dog      | 218          |     horse     | 272          |
|     sheep     | 354          |     cow      | 372          |   elephant    | 252          |
|     bear      | 71           |    zebra     | 266          |    giraffe    | 232          |
|   backpack    | 371          |   umbrella   | 407          |    handbag    | 540          |
|      tie      | 252          |   suitcase   | 299          |    frisbee    | 115          |
|     skis      | 241          |  snowboard   | 69           |  sports ball  | 260          |
|     kite      | 327          | baseball bat | 145          | baseball gl.. | 148          |
|  skateboard   | 179          |  surfboard   | 267          | tennis racket | 225          |
|    bottle     | 1013         |  wine glass  | 341          |      cup      | 895          |
|     fork      | 215          |    knife     | 325          |     spoon     | 253          |
|     bowl      | 623          |    banana    | 370          |     apple     | 236          |
|   sandwich    | 177          |    orange    | 285          |   broccoli    | 312          |
|    carrot     | 365          |   hot dog    | 125          |     pizza     | 284          |
|     donut     | 328          |     cake     | 310          |     chair     | 1771         |
|     couch     | 261          | potted plant | 342          |      bed      | 163          |
| dining table  | 695          |    toilet    | 179          |      tv       | 288          |
|    laptop     | 231          |    mouse     | 106          |    remote     | 283          |
|   keyboard    | 153          |  cell phone  | 262          |   microwave   | 55           |
|     oven      | 143          |   toaster    | 9            |     sink      | 225          |
| refrigerator  | 126          |     book     | 1129         |     clock     | 267          |
|     vase      | 274          |   scissors   | 36           |  teddy bear   | 190          |
|  hair drier   | 11           |  toothbrush  | 57           |               |              |
|     total     | 36335        |              |              |               |              |[0m
[32m[01/30 23:26:10 d2.evaluation.evaluator]: [0mStart inference on 5000 images
[32m[01/30 23:26:12 d2.evaluation.evaluator]: [0mInference done 11/5000. 0.1348 s / img. ETA=0:13:35
[32m[01/30 23:26:17 d2.evaluation.evaluator]: [0mInference done 42/5000. 0.1368 s / img. ETA=0:13:22
[32m[01/30 23:26:22 d2.evaluation.evaluator]: [0mInference done 73/5000. 0.1377 s / img. ETA=0:13:18
[32m[01/30 23:26:27 d2.evaluation.evaluator]: [0mInference done 102/5000. 0.1374 s / img. ETA=0:13:30
[32m[01/30 23:26:32 d2.evaluation.evaluator]: [0mInference done 132/5000. 0.1377 s / img. ETA=0:13:28
[32m[01/30 23:26:37 d2.evaluation.evaluator]: [0mInference done 161/5000. 0.1385 s / img. ETA=0:13:33
[32m[01/30 23:26:42 d2.evaluation.evaluator]: [0mInference done 191/5000. 0.1387 s / img. ETA=0:13:32
[32m[01/30 23:26:48 d2.evaluation.evaluator]: [0mInference done 223/5000. 0.1382 s / img. ETA=0:13:18
[32m[01/30 23:26:53 d2.evaluation.evaluator]: [0mInference done 252/5000. 0.1387 s / img. ETA=0:13:17
[32m[01/30 23:26:58 d2.evaluation.evaluator]: [0mInference done 282/5000. 0.1388 s / img. ETA=0:13:12
[32m[01/30 23:27:03 d2.evaluation.evaluator]: [0mInference done 311/5000. 0.1391 s / img. ETA=0:13:09
[32m[01/30 23:27:08 d2.evaluation.evaluator]: [0mInference done 339/5000. 0.1395 s / img. ETA=0:13:09
[32m[01/30 23:27:13 d2.evaluation.evaluator]: [0mInference done 368/5000. 0.1398 s / img. ETA=0:13:06
[32m[01/30 23:27:18 d2.evaluation.evaluator]: [0mInference done 400/5000. 0.1396 s / img. ETA=0:12:56
[32m[01/30 23:27:23 d2.evaluation.evaluator]: [0mInference done 431/5000. 0.1396 s / img. ETA=0:12:50
[32m[01/30 23:27:28 d2.evaluation.evaluator]: [0mInference done 462/5000. 0.1398 s / img. ETA=0:12:43
[32m[01/30 23:27:33 d2.evaluation.evaluator]: [0mInference done 491/5000. 0.1401 s / img. ETA=0:12:40
[32m[01/30 23:27:38 d2.evaluation.evaluator]: [0mInference done 521/5000. 0.1402 s / img. ETA=0:12:36
[32m[01/30 23:27:43 d2.evaluation.evaluator]: [0mInference done 549/5000. 0.1405 s / img. ETA=0:12:34
[32m[01/30 23:27:48 d2.evaluation.evaluator]: [0mInference done 578/5000. 0.1407 s / img. ETA=0:12:31
[32m[01/30 23:27:54 d2.evaluation.evaluator]: [0mInference done 609/5000. 0.1408 s / img. ETA=0:12:25
[32m[01/30 23:27:59 d2.evaluation.evaluator]: [0mInference done 636/5000. 0.1410 s / img. ETA=0:12:25
[32m[01/30 23:28:04 d2.evaluation.evaluator]: [0mInference done 664/5000. 0.1411 s / img. ETA=0:12:22
[32m[01/30 23:28:09 d2.evaluation.evaluator]: [0mInference done 694/5000. 0.1413 s / img. ETA=0:12:16
[32m[01/30 23:28:14 d2.evaluation.evaluator]: [0mInference done 722/5000. 0.1416 s / img. ETA=0:12:13
[32m[01/30 23:28:19 d2.evaluation.evaluator]: [0mInference done 751/5000. 0.1417 s / img. ETA=0:12:09
[32m[01/30 23:28:24 d2.evaluation.evaluator]: [0mInference done 782/5000. 0.1418 s / img. ETA=0:12:03
[32m[01/30 23:28:29 d2.evaluation.evaluator]: [0mInference done 811/5000. 0.1420 s / img. ETA=0:11:59
[32m[01/30 23:28:35 d2.evaluation.evaluator]: [0mInference done 841/5000. 0.1421 s / img. ETA=0:11:53
[32m[01/30 23:28:40 d2.evaluation.evaluator]: [0mInference done 870/5000. 0.1423 s / img. ETA=0:11:48
[32m[01/30 23:28:45 d2.evaluation.evaluator]: [0mInference done 898/5000. 0.1425 s / img. ETA=0:11:45
[32m[01/30 23:28:50 d2.evaluation.evaluator]: [0mInference done 928/5000. 0.1425 s / img. ETA=0:11:40
[32m[01/30 23:28:55 d2.evaluation.evaluator]: [0mInference done 959/5000. 0.1426 s / img. ETA=0:11:33
[32m[01/30 23:29:00 d2.evaluation.evaluator]: [0mInference done 986/5000. 0.1429 s / img. ETA=0:11:31
[32m[01/30 23:29:05 d2.evaluation.evaluator]: [0mInference done 1017/5000. 0.1429 s / img. ETA=0:11:25
[32m[01/30 23:29:10 d2.evaluation.evaluator]: [0mInference done 1044/5000. 0.1431 s / img. ETA=0:11:22
[32m[01/30 23:29:15 d2.evaluation.evaluator]: [0mInference done 1073/5000. 0.1433 s / img. ETA=0:11:17
[32m[01/30 23:29:21 d2.evaluation.evaluator]: [0mInference done 1103/5000. 0.1434 s / img. ETA=0:11:12
[32m[01/30 23:29:26 d2.evaluation.evaluator]: [0mInference done 1132/5000. 0.1436 s / img. ETA=0:11:07
[32m[01/30 23:29:31 d2.evaluation.evaluator]: [0mInference done 1161/5000. 0.1437 s / img. ETA=0:11:03
[32m[01/30 23:29:36 d2.evaluation.evaluator]: [0mInference done 1189/5000. 0.1439 s / img. ETA=0:10:59
[32m[01/30 23:29:41 d2.evaluation.evaluator]: [0mInference done 1216/5000. 0.1441 s / img. ETA=0:10:56
[32m[01/30 23:29:46 d2.evaluation.evaluator]: [0mInference done 1243/5000. 0.1442 s / img. ETA=0:10:52
[32m[01/30 23:29:51 d2.evaluation.evaluator]: [0mInference done 1272/5000. 0.1443 s / img. ETA=0:10:48
[32m[01/30 23:29:56 d2.evaluation.evaluator]: [0mInference done 1301/5000. 0.1444 s / img. ETA=0:10:43
[32m[01/30 23:30:02 d2.evaluation.evaluator]: [0mInference done 1330/5000. 0.1444 s / img. ETA=0:10:38
[32m[01/30 23:30:07 d2.evaluation.evaluator]: [0mInference done 1357/5000. 0.1446 s / img. ETA=0:10:35
[32m[01/30 23:30:12 d2.evaluation.evaluator]: [0mInference done 1386/5000. 0.1447 s / img. ETA=0:10:30
[32m[01/30 23:30:17 d2.evaluation.evaluator]: [0mInference done 1416/5000. 0.1448 s / img. ETA=0:10:24
[32m[01/30 23:30:22 d2.evaluation.evaluator]: [0mInference done 1444/5000. 0.1449 s / img. ETA=0:10:20
[32m[01/30 23:30:27 d2.evaluation.evaluator]: [0mInference done 1474/5000. 0.1449 s / img. ETA=0:10:15
[32m[01/30 23:30:32 d2.evaluation.evaluator]: [0mInference done 1502/5000. 0.1450 s / img. ETA=0:10:10
[32m[01/30 23:30:38 d2.evaluation.evaluator]: [0mInference done 1531/5000. 0.1450 s / img. ETA=0:10:05
[32m[01/30 23:30:43 d2.evaluation.evaluator]: [0mInference done 1557/5000. 0.1452 s / img. ETA=0:10:02
[32m[01/30 23:30:48 d2.evaluation.evaluator]: [0mInference done 1585/5000. 0.1453 s / img. ETA=0:09:58
[32m[01/30 23:30:53 d2.evaluation.evaluator]: [0mInference done 1612/5000. 0.1455 s / img. ETA=0:09:54
[32m[01/30 23:30:58 d2.evaluation.evaluator]: [0mInference done 1641/5000. 0.1456 s / img. ETA=0:09:49
[32m[01/30 23:31:03 d2.evaluation.evaluator]: [0mInference done 1668/5000. 0.1457 s / img. ETA=0:09:45
[32m[01/30 23:31:08 d2.evaluation.evaluator]: [0mInference done 1697/5000. 0.1457 s / img. ETA=0:09:40
[32m[01/30 23:31:14 d2.evaluation.evaluator]: [0mInference done 1725/5000. 0.1458 s / img. ETA=0:09:35
[32m[01/30 23:31:19 d2.evaluation.evaluator]: [0mInference done 1755/5000. 0.1459 s / img. ETA=0:09:30
[32m[01/30 23:31:24 d2.evaluation.evaluator]: [0mInference done 1784/5000. 0.1459 s / img. ETA=0:09:25
[32m[01/30 23:31:29 d2.evaluation.evaluator]: [0mInference done 1813/5000. 0.1460 s / img. ETA=0:09:20
[32m[01/30 23:31:34 d2.evaluation.evaluator]: [0mInference done 1841/5000. 0.1461 s / img. ETA=0:09:15
[32m[01/30 23:31:39 d2.evaluation.evaluator]: [0mInference done 1869/5000. 0.1461 s / img. ETA=0:09:10
[32m[01/30 23:31:44 d2.evaluation.evaluator]: [0mInference done 1897/5000. 0.1462 s / img. ETA=0:09:06
[32m[01/30 23:31:49 d2.evaluation.evaluator]: [0mInference done 1926/5000. 0.1463 s / img. ETA=0:09:01
[32m[01/30 23:31:54 d2.evaluation.evaluator]: [0mInference done 1956/5000. 0.1463 s / img. ETA=0:08:55
[32m[01/30 23:31:59 d2.evaluation.evaluator]: [0mInference done 1983/5000. 0.1464 s / img. ETA=0:08:51
[32m[01/30 23:32:05 d2.evaluation.evaluator]: [0mInference done 2011/5000. 0.1465 s / img. ETA=0:08:46
[32m[01/30 23:32:10 d2.evaluation.evaluator]: [0mInference done 2039/5000. 0.1466 s / img. ETA=0:08:42
[32m[01/30 23:32:15 d2.evaluation.evaluator]: [0mInference done 2068/5000. 0.1467 s / img. ETA=0:08:36
[32m[01/30 23:32:20 d2.evaluation.evaluator]: [0mInference done 2097/5000. 0.1467 s / img. ETA=0:08:31
[32m[01/30 23:32:25 d2.evaluation.evaluator]: [0mInference done 2126/5000. 0.1468 s / img. ETA=0:08:26
[32m[01/30 23:32:30 d2.evaluation.evaluator]: [0mInference done 2154/5000. 0.1468 s / img. ETA=0:08:22
[32m[01/30 23:32:35 d2.evaluation.evaluator]: [0mInference done 2183/5000. 0.1468 s / img. ETA=0:08:16
[32m[01/30 23:32:40 d2.evaluation.evaluator]: [0mInference done 2211/5000. 0.1469 s / img. ETA=0:08:12
[32m[01/30 23:32:45 d2.evaluation.evaluator]: [0mInference done 2239/5000. 0.1470 s / img. ETA=0:08:07
[32m[01/30 23:32:50 d2.evaluation.evaluator]: [0mInference done 2266/5000. 0.1471 s / img. ETA=0:08:02
[32m[01/30 23:32:56 d2.evaluation.evaluator]: [0mInference done 2296/5000. 0.1472 s / img. ETA=0:07:57
[32m[01/30 23:33:01 d2.evaluation.evaluator]: [0mInference done 2324/5000. 0.1472 s / img. ETA=0:07:52
[32m[01/30 23:33:06 d2.evaluation.evaluator]: [0mInference done 2354/5000. 0.1473 s / img. ETA=0:07:47
[32m[01/30 23:33:11 d2.evaluation.evaluator]: [0mInference done 2382/5000. 0.1473 s / img. ETA=0:07:42
[32m[01/30 23:33:16 d2.evaluation.evaluator]: [0mInference done 2409/5000. 0.1474 s / img. ETA=0:07:37
[32m[01/30 23:33:21 d2.evaluation.evaluator]: [0mInference done 2436/5000. 0.1475 s / img. ETA=0:07:33
[32m[01/30 23:33:26 d2.evaluation.evaluator]: [0mInference done 2464/5000. 0.1476 s / img. ETA=0:07:28
[32m[01/30 23:33:31 d2.evaluation.evaluator]: [0mInference done 2492/5000. 0.1476 s / img. ETA=0:07:23
[32m[01/30 23:33:36 d2.evaluation.evaluator]: [0mInference done 2519/5000. 0.1476 s / img. ETA=0:07:19
[32m[01/30 23:33:41 d2.evaluation.evaluator]: [0mInference done 2548/5000. 0.1477 s / img. ETA=0:07:14
[32m[01/30 23:33:46 d2.evaluation.evaluator]: [0mInference done 2574/5000. 0.1478 s / img. ETA=0:07:10
[32m[01/30 23:33:52 d2.evaluation.evaluator]: [0mInference done 2603/5000. 0.1478 s / img. ETA=0:07:04
[32m[01/30 23:33:57 d2.evaluation.evaluator]: [0mInference done 2629/5000. 0.1479 s / img. ETA=0:07:00
[32m[01/30 23:34:02 d2.evaluation.evaluator]: [0mInference done 2656/5000. 0.1479 s / img. ETA=0:06:56
[32m[01/30 23:34:07 d2.evaluation.evaluator]: [0mInference done 2684/5000. 0.1480 s / img. ETA=0:06:51
[32m[01/30 23:34:12 d2.evaluation.evaluator]: [0mInference done 2713/5000. 0.1480 s / img. ETA=0:06:45
[32m[01/30 23:34:17 d2.evaluation.evaluator]: [0mInference done 2741/5000. 0.1481 s / img. ETA=0:06:41
[32m[01/30 23:34:22 d2.evaluation.evaluator]: [0mInference done 2769/5000. 0.1481 s / img. ETA=0:06:36
[32m[01/30 23:34:27 d2.evaluation.evaluator]: [0mInference done 2797/5000. 0.1482 s / img. ETA=0:06:31
[32m[01/30 23:34:32 d2.evaluation.evaluator]: [0mInference done 2824/5000. 0.1482 s / img. ETA=0:06:26
[32m[01/30 23:34:37 d2.evaluation.evaluator]: [0mInference done 2852/5000. 0.1483 s / img. ETA=0:06:21
[32m[01/30 23:34:42 d2.evaluation.evaluator]: [0mInference done 2881/5000. 0.1483 s / img. ETA=0:06:16
[32m[01/30 23:34:47 d2.evaluation.evaluator]: [0mInference done 2908/5000. 0.1484 s / img. ETA=0:06:12
[32m[01/30 23:34:52 d2.evaluation.evaluator]: [0mInference done 2935/5000. 0.1484 s / img. ETA=0:06:07
[32m[01/30 23:34:57 d2.evaluation.evaluator]: [0mInference done 2964/5000. 0.1485 s / img. ETA=0:06:02
[32m[01/30 23:35:03 d2.evaluation.evaluator]: [0mInference done 2992/5000. 0.1485 s / img. ETA=0:05:57
[32m[01/30 23:35:08 d2.evaluation.evaluator]: [0mInference done 3020/5000. 0.1486 s / img. ETA=0:05:52
[32m[01/30 23:35:13 d2.evaluation.evaluator]: [0mInference done 3047/5000. 0.1487 s / img. ETA=0:05:47
[32m[01/30 23:35:18 d2.evaluation.evaluator]: [0mInference done 3076/5000. 0.1487 s / img. ETA=0:05:42
[32m[01/30 23:35:23 d2.evaluation.evaluator]: [0mInference done 3105/5000. 0.1488 s / img. ETA=0:05:37
[32m[01/30 23:35:28 d2.evaluation.evaluator]: [0mInference done 3132/5000. 0.1488 s / img. ETA=0:05:32
[32m[01/30 23:35:33 d2.evaluation.evaluator]: [0mInference done 3161/5000. 0.1489 s / img. ETA=0:05:27
[32m[01/30 23:35:38 d2.evaluation.evaluator]: [0mInference done 3189/5000. 0.1489 s / img. ETA=0:05:22
[32m[01/30 23:35:43 d2.evaluation.evaluator]: [0mInference done 3215/5000. 0.1489 s / img. ETA=0:05:18
[32m[01/30 23:35:48 d2.evaluation.evaluator]: [0mInference done 3242/5000. 0.1490 s / img. ETA=0:05:13
[32m[01/30 23:35:54 d2.evaluation.evaluator]: [0mInference done 3270/5000. 0.1490 s / img. ETA=0:05:08
[32m[01/30 23:35:59 d2.evaluation.evaluator]: [0mInference done 3296/5000. 0.1491 s / img. ETA=0:05:04
[32m[01/30 23:36:04 d2.evaluation.evaluator]: [0mInference done 3323/5000. 0.1491 s / img. ETA=0:04:59
[32m[01/30 23:36:09 d2.evaluation.evaluator]: [0mInference done 3352/5000. 0.1491 s / img. ETA=0:04:54
[32m[01/30 23:36:14 d2.evaluation.evaluator]: [0mInference done 3379/5000. 0.1492 s / img. ETA=0:04:49
[32m[01/30 23:36:19 d2.evaluation.evaluator]: [0mInference done 3409/5000. 0.1492 s / img. ETA=0:04:44
[32m[01/30 23:36:24 d2.evaluation.evaluator]: [0mInference done 3436/5000. 0.1492 s / img. ETA=0:04:39
[32m[01/30 23:36:29 d2.evaluation.evaluator]: [0mInference done 3463/5000. 0.1493 s / img. ETA=0:04:34
[32m[01/30 23:36:34 d2.evaluation.evaluator]: [0mInference done 3493/5000. 0.1493 s / img. ETA=0:04:29
[32m[01/30 23:36:40 d2.evaluation.evaluator]: [0mInference done 3520/5000. 0.1493 s / img. ETA=0:04:24
[32m[01/30 23:36:45 d2.evaluation.evaluator]: [0mInference done 3549/5000. 0.1494 s / img. ETA=0:04:19
[32m[01/30 23:36:50 d2.evaluation.evaluator]: [0mInference done 3577/5000. 0.1494 s / img. ETA=0:04:14
[32m[01/30 23:36:55 d2.evaluation.evaluator]: [0mInference done 3604/5000. 0.1494 s / img. ETA=0:04:09
[32m[01/30 23:37:00 d2.evaluation.evaluator]: [0mInference done 3632/5000. 0.1494 s / img. ETA=0:04:04
[32m[01/30 23:37:05 d2.evaluation.evaluator]: [0mInference done 3660/5000. 0.1495 s / img. ETA=0:03:59
[32m[01/30 23:37:10 d2.evaluation.evaluator]: [0mInference done 3688/5000. 0.1495 s / img. ETA=0:03:54
[32m[01/30 23:37:15 d2.evaluation.evaluator]: [0mInference done 3716/5000. 0.1495 s / img. ETA=0:03:49
[32m[01/30 23:37:21 d2.evaluation.evaluator]: [0mInference done 3744/5000. 0.1496 s / img. ETA=0:03:44
[32m[01/30 23:37:26 d2.evaluation.evaluator]: [0mInference done 3772/5000. 0.1496 s / img. ETA=0:03:39
[32m[01/30 23:37:31 d2.evaluation.evaluator]: [0mInference done 3799/5000. 0.1496 s / img. ETA=0:03:35
[32m[01/30 23:37:36 d2.evaluation.evaluator]: [0mInference done 3827/5000. 0.1497 s / img. ETA=0:03:30
[32m[01/30 23:37:41 d2.evaluation.evaluator]: [0mInference done 3856/5000. 0.1497 s / img. ETA=0:03:24
[32m[01/30 23:37:46 d2.evaluation.evaluator]: [0mInference done 3884/5000. 0.1497 s / img. ETA=0:03:19
[32m[01/30 23:37:51 d2.evaluation.evaluator]: [0mInference done 3913/5000. 0.1497 s / img. ETA=0:03:14
[32m[01/30 23:37:56 d2.evaluation.evaluator]: [0mInference done 3941/5000. 0.1498 s / img. ETA=0:03:09
[32m[01/30 23:38:01 d2.evaluation.evaluator]: [0mInference done 3970/5000. 0.1498 s / img. ETA=0:03:04
[32m[01/30 23:38:07 d2.evaluation.evaluator]: [0mInference done 3999/5000. 0.1498 s / img. ETA=0:02:59
[32m[01/30 23:38:12 d2.evaluation.evaluator]: [0mInference done 4026/5000. 0.1498 s / img. ETA=0:02:54
[32m[01/30 23:38:17 d2.evaluation.evaluator]: [0mInference done 4053/5000. 0.1498 s / img. ETA=0:02:49
[32m[01/30 23:38:22 d2.evaluation.evaluator]: [0mInference done 4080/5000. 0.1498 s / img. ETA=0:02:44
[32m[01/30 23:38:27 d2.evaluation.evaluator]: [0mInference done 4108/5000. 0.1499 s / img. ETA=0:02:40
[32m[01/30 23:38:32 d2.evaluation.evaluator]: [0mInference done 4136/5000. 0.1499 s / img. ETA=0:02:35
[32m[01/30 23:38:37 d2.evaluation.evaluator]: [0mInference done 4163/5000. 0.1499 s / img. ETA=0:02:30
[32m[01/30 23:38:42 d2.evaluation.evaluator]: [0mInference done 4190/5000. 0.1499 s / img. ETA=0:02:25
[32m[01/30 23:38:47 d2.evaluation.evaluator]: [0mInference done 4218/5000. 0.1500 s / img. ETA=0:02:20
[32m[01/30 23:38:53 d2.evaluation.evaluator]: [0mInference done 4246/5000. 0.1500 s / img. ETA=0:02:15
[32m[01/30 23:38:58 d2.evaluation.evaluator]: [0mInference done 4273/5000. 0.1500 s / img. ETA=0:02:10
[32m[01/30 23:39:03 d2.evaluation.evaluator]: [0mInference done 4300/5000. 0.1500 s / img. ETA=0:02:05
[32m[01/30 23:39:08 d2.evaluation.evaluator]: [0mInference done 4329/5000. 0.1500 s / img. ETA=0:02:00
[32m[01/30 23:39:13 d2.evaluation.evaluator]: [0mInference done 4359/5000. 0.1500 s / img. ETA=0:01:55
[32m[01/30 23:39:18 d2.evaluation.evaluator]: [0mInference done 4387/5000. 0.1500 s / img. ETA=0:01:50
[32m[01/30 23:39:23 d2.evaluation.evaluator]: [0mInference done 4415/5000. 0.1500 s / img. ETA=0:01:45
[32m[01/30 23:39:28 d2.evaluation.evaluator]: [0mInference done 4443/5000. 0.1501 s / img. ETA=0:01:40
[32m[01/30 23:39:33 d2.evaluation.evaluator]: [0mInference done 4471/5000. 0.1501 s / img. ETA=0:01:35
[32m[01/30 23:39:38 d2.evaluation.evaluator]: [0mInference done 4499/5000. 0.1501 s / img. ETA=0:01:30
[32m[01/30 23:39:43 d2.evaluation.evaluator]: [0mInference done 4528/5000. 0.1501 s / img. ETA=0:01:24
[32m[01/30 23:39:49 d2.evaluation.evaluator]: [0mInference done 4556/5000. 0.1501 s / img. ETA=0:01:19
[32m[01/30 23:39:54 d2.evaluation.evaluator]: [0mInference done 4582/5000. 0.1502 s / img. ETA=0:01:15
[32m[01/30 23:39:59 d2.evaluation.evaluator]: [0mInference done 4610/5000. 0.1502 s / img. ETA=0:01:10
[32m[01/30 23:40:04 d2.evaluation.evaluator]: [0mInference done 4639/5000. 0.1502 s / img. ETA=0:01:04
[32m[01/30 23:40:09 d2.evaluation.evaluator]: [0mInference done 4664/5000. 0.1502 s / img. ETA=0:01:00
[32m[01/30 23:40:14 d2.evaluation.evaluator]: [0mInference done 4692/5000. 0.1502 s / img. ETA=0:00:55
[32m[01/30 23:40:19 d2.evaluation.evaluator]: [0mInference done 4720/5000. 0.1503 s / img. ETA=0:00:50
[32m[01/30 23:40:24 d2.evaluation.evaluator]: [0mInference done 4749/5000. 0.1503 s / img. ETA=0:00:45
[32m[01/30 23:40:29 d2.evaluation.evaluator]: [0mInference done 4776/5000. 0.1503 s / img. ETA=0:00:40
[32m[01/30 23:40:35 d2.evaluation.evaluator]: [0mInference done 4804/5000. 0.1503 s / img. ETA=0:00:35
[32m[01/30 23:40:40 d2.evaluation.evaluator]: [0mInference done 4833/5000. 0.1503 s / img. ETA=0:00:30
[32m[01/30 23:40:45 d2.evaluation.evaluator]: [0mInference done 4861/5000. 0.1504 s / img. ETA=0:00:25
[32m[01/30 23:40:50 d2.evaluation.evaluator]: [0mInference done 4890/5000. 0.1504 s / img. ETA=0:00:19
[32m[01/30 23:40:55 d2.evaluation.evaluator]: [0mInference done 4917/5000. 0.1504 s / img. ETA=0:00:14
[32m[01/30 23:41:00 d2.evaluation.evaluator]: [0mInference done 4945/5000. 0.1504 s / img. ETA=0:00:09
[32m[01/30 23:41:05 d2.evaluation.evaluator]: [0mInference done 4973/5000. 0.1504 s / img. ETA=0:00:04
[32m[01/30 23:41:10 d2.evaluation.evaluator]: [0mTotal inference time: 0:14:59.325661 (0.180045 s / img per device, on 1 devices)
[32m[01/30 23:41:10 d2.evaluation.evaluator]: [0mTotal inference pure compute time: 0:12:31 (0.150459 s / img per device, on 1 devices)
[32m[01/30 23:41:12 d2.evaluation.coco_evaluation]: [0mPreparing results for COCO format ...
[32m[01/30 23:41:12 d2.evaluation.coco_evaluation]: [0mSaving results to ./output/inference/coco_instances_results.json
[32m[01/30 23:41:13 d2.evaluation.coco_evaluation]: [0mEvaluating predictions ...
Loading and preparing results...
DONE (t=0.12s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=30.76s).
Accumulating evaluation results...
DONE (t=4.08s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.443
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.622
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.480
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.266
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.477
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.577
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.355
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.559
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.587
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.390
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.623
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.738
[32m[01/30 23:41:48 d2.evaluation.coco_evaluation]: [0mEvaluation results for bbox: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 44.328 | 62.216 | 48.049 | 26.582 | 47.693 | 57.689 |
[32m[01/30 23:41:48 d2.evaluation.coco_evaluation]: [0mPer-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 58.829 | bicycle      | 34.030 | car            | 47.982 |
| motorcycle    | 46.005 | airplane     | 69.332 | bus            | 67.804 |
| train         | 68.660 | truck        | 37.116 | boat           | 31.575 |
| traffic light | 29.593 | fire hydrant | 68.503 | stop sign      | 72.640 |
| parking meter | 49.581 | bench        | 27.241 | bird           | 39.372 |
| cat           | 71.441 | dog          | 64.291 | horse          | 60.315 |
| sheep         | 54.188 | cow          | 58.604 | elephant       | 65.367 |
| bear          | 70.380 | zebra        | 68.298 | giraffe        | 70.615 |
| backpack      | 18.090 | umbrella     | 42.174 | handbag        | 16.000 |
| tie           | 38.339 | suitcase     | 39.313 | frisbee        | 68.186 |
| skis          | 26.388 | snowboard    | 41.729 | sports ball    | 49.244 |
| kite          | 45.903 | baseball bat | 32.472 | baseball glove | 37.272 |
| skateboard    | 56.071 | surfboard    | 42.737 | tennis racket  | 49.165 |
| bottle        | 41.687 | wine glass   | 39.312 | cup            | 44.264 |
| fork          | 39.606 | knife        | 21.995 | spoon          | 19.366 |
| bowl          | 45.057 | banana       | 25.891 | apple          | 21.295 |
| sandwich      | 36.851 | orange       | 31.983 | broccoli       | 23.432 |
| carrot        | 22.705 | hot dog      | 36.311 | pizza          | 56.095 |
| donut         | 46.319 | cake         | 36.917 | chair          | 29.275 |
| couch         | 45.449 | potted plant | 27.073 | bed            | 45.888 |
| dining table  | 30.219 | toilet       | 64.506 | tv             | 59.074 |
| laptop        | 63.152 | mouse        | 66.336 | remote         | 34.243 |
| keyboard      | 55.127 | cell phone   | 38.124 | microwave      | 60.459 |
| oven          | 35.840 | toaster      | 47.466 | sink           | 39.829 |
| refrigerator  | 58.826 | book         | 16.994 | clock          | 51.256 |
| vase          | 41.951 | scissors     | 28.987 | teddy bear     | 48.472 |
| hair drier    | 4.455  | toothbrush   | 29.277 |                |        |
Loading and preparing results...
DONE (t=1.58s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=35.31s).
Accumulating evaluation results...
DONE (t=4.20s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.385
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.596
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.415
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.195
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.411
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.545
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.317
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.489
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.511
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.322
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.544
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.658
[32m[01/30 23:42:34 d2.evaluation.coco_evaluation]: [0mEvaluation results for segm: 
|   AP   |  AP50  |  AP75  |  APs   |  APm   |  APl   |
|:------:|:------:|:------:|:------:|:------:|:------:|
| 38.456 | 59.636 | 41.481 | 19.530 | 41.112 | 54.467 |
[32m[01/30 23:42:34 d2.evaluation.coco_evaluation]: [0mPer-category segm AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 48.585 | bicycle      | 18.877 | car            | 42.950 |
| motorcycle    | 33.702 | airplane     | 49.791 | bus            | 63.787 |
| train         | 64.092 | truck        | 35.680 | boat           | 25.491 |
| traffic light | 27.688 | fire hydrant | 63.029 | stop sign      | 69.397 |
| parking meter | 47.870 | bench        | 18.986 | bird           | 31.256 |
| cat           | 68.466 | dog          | 58.862 | horse          | 42.204 |
| sheep         | 44.411 | cow          | 48.391 | elephant       | 57.901 |
| bear          | 67.441 | zebra        | 57.563 | giraffe        | 52.048 |
| backpack      | 15.867 | umbrella     | 45.700 | handbag        | 15.303 |
| tie           | 33.517 | suitcase     | 41.193 | frisbee        | 64.990 |
| skis          | 3.580  | snowboard    | 26.025 | sports ball    | 47.906 |
| kite          | 31.618 | baseball bat | 25.688 | baseball glove | 39.280 |
| skateboard    | 34.025 | surfboard    | 33.118 | tennis racket  | 53.612 |
| bottle        | 38.835 | wine glass   | 32.635 | cup            | 42.835 |
| fork          | 17.081 | knife        | 13.270 | spoon          | 12.184 |
| bowl          | 40.770 | banana       | 20.192 | apple          | 19.492 |
| sandwich      | 37.082 | orange       | 31.128 | broccoli       | 22.148 |
| carrot        | 19.146 | hot dog      | 28.080 | pizza          | 52.507 |
| donut         | 45.873 | cake         | 35.640 | chair          | 19.148 |
| couch         | 35.427 | potted plant | 23.266 | bed            | 34.982 |
| dining table  | 16.945 | toilet       | 60.721 | tv             | 60.015 |
| laptop        | 60.711 | mouse        | 64.552 | remote         | 30.444 |
| keyboard      | 51.740 | cell phone   | 35.083 | microwave      | 59.640 |
| oven          | 32.015 | toaster      | 51.130 | sink           | 35.194 |
| refrigerator  | 57.812 | book         | 11.533 | clock          | 51.046 |
| vase          | 38.945 | scissors     | 21.687 | teddy bear     | 44.844 |
| hair drier    | 3.040  | toothbrush   | 17.792 |                |        |
[32m[01/30 23:42:34 d2.engine.defaults]: [0mEvaluation results for coco_2017_val in csv format:
[32m[01/30 23:42:34 d2.evaluation.testing]: [0mcopypaste: Task: bbox
[32m[01/30 23:42:34 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[01/30 23:42:34 d2.evaluation.testing]: [0mcopypaste: 44.3276,62.2157,48.0486,26.5816,47.6926,57.6892
[32m[01/30 23:42:34 d2.evaluation.testing]: [0mcopypaste: Task: segm
[32m[01/30 23:42:34 d2.evaluation.testing]: [0mcopypaste: AP,AP50,AP75,APs,APm,APl
[32m[01/30 23:42:34 d2.evaluation.testing]: [0mcopypaste: 38.4563,59.6357,41.4812,19.5303,41.1124,54.4673
